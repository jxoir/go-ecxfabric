// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ServiceProfileModelv3 service profile modelv3
// swagger:model ServiceProfileModelv3
type ServiceProfileModelv3 struct {

	// additional info
	AdditionalInfo *AdditionalInfoModel `json:"additionalInfo,omitempty"`

	// allow custom speed
	AllowCustomSpeed bool `json:"allowCustomSpeed,omitempty"`

	// auth key label
	AuthKeyLabel string `json:"authKeyLabel,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// features
	Features *EnabledFeaturesModel `json:"features,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// on profile approval reject notification
	OnProfileApprovalRejectNotification []string `json:"onProfileApprovalRejectNotification"`

	// optional network services
	OptionalNetworkServices *OptionalNetworkServicesv3 `json:"optionalNetworkServices,omitempty"`

	// routing instance details
	RoutingInstanceDetails *RoutingInstanceDetailsv31 `json:"routingInstanceDetails,omitempty"`

	// service type
	ServiceType string `json:"serviceType,omitempty"`

	// speed bands
	SpeedBands []*SpeedBand `json:"speedBands"`

	// status for display
	StatusForDisplay string `json:"statusForDisplay,omitempty"`
}

// Validate validates this service profile modelv3
func (m *ServiceProfileModelv3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionalNetworkServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingInstanceDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeedBands(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceProfileModelv3) validateAdditionalInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalInfo) { // not required
		return nil
	}

	if m.AdditionalInfo != nil {
		if err := m.AdditionalInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additionalInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceProfileModelv3) validateFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Features) { // not required
		return nil
	}

	if m.Features != nil {
		if err := m.Features.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("features")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceProfileModelv3) validateOptionalNetworkServices(formats strfmt.Registry) error {

	if swag.IsZero(m.OptionalNetworkServices) { // not required
		return nil
	}

	if m.OptionalNetworkServices != nil {
		if err := m.OptionalNetworkServices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optionalNetworkServices")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceProfileModelv3) validateRoutingInstanceDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutingInstanceDetails) { // not required
		return nil
	}

	if m.RoutingInstanceDetails != nil {
		if err := m.RoutingInstanceDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routingInstanceDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceProfileModelv3) validateSpeedBands(formats strfmt.Registry) error {

	if swag.IsZero(m.SpeedBands) { // not required
		return nil
	}

	for i := 0; i < len(m.SpeedBands); i++ {
		if swag.IsZero(m.SpeedBands[i]) { // not required
			continue
		}

		if m.SpeedBands[i] != nil {
			if err := m.SpeedBands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("speedBands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceProfileModelv3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceProfileModelv3) UnmarshalBinary(b []byte) error {
	var res ServiceProfileModelv3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
