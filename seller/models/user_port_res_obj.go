// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// UserPortResObj user port res obj
// swagger:model UserPortResObj
type UserPortResObj struct {

	// buyout
	Buyout bool `json:"buyout,omitempty"`

	// created date
	CreatedDate string `json:"createdDate,omitempty"`

	// cust org Id
	CustOrgID string `json:"custOrgId,omitempty"`

	// device
	Device string `json:"device,omitempty"`

	// device group
	DeviceGroup string `json:"deviceGroup,omitempty"`

	// device priority
	DevicePriority string `json:"devicePriority,omitempty"`

	// encapsulation
	Encapsulation string `json:"encapsulation,omitempty"`

	// ibx
	Ibx string `json:"ibx,omitempty"`

	// lag
	Lag bool `json:"lag,omitempty"`

	// last updated date
	LastUpdatedDate string `json:"lastUpdatedDate,omitempty"`

	// layer3 enabled
	Layer3Enabled bool `json:"layer3Enabled,omitempty"`

	// metro code
	MetroCode string `json:"metroCode,omitempty"`

	// metro description
	MetroDescription string `json:"metroDescription,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// place vc order permission
	PlaceVcOrderPermission bool `json:"placeVcOrderPermission,omitempty"`

	// provision status
	ProvisionStatus string `json:"provisionStatus,omitempty"`

	// region
	Region string `json:"region,omitempty"`

	// total bandwidth
	TotalBandwidth int64 `json:"totalBandwidth,omitempty"`

	// user ports
	UserPorts []*UserPortsObj `json:"userPorts"`

	// uuid
	UUID string `json:"uuid,omitempty"`

	// view port permission
	ViewPortPermission bool `json:"viewPortPermission,omitempty"`
}

// Validate validates this user port res obj
func (m *UserPortResObj) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPortResObj) validateUserPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.UserPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.UserPorts); i++ {
		if swag.IsZero(m.UserPorts[i]) { // not required
			continue
		}

		if m.UserPorts[i] != nil {
			if err := m.UserPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPortResObj) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPortResObj) UnmarshalBinary(b []byte) error {
	var res UserPortResObj
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
