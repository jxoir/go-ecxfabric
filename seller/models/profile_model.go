// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProfileModel profile model
// swagger:model ProfileModel
type ProfileModel struct {

	// additional buyer info
	AdditionalBuyerInfo []*AdditionalBuyerInfo `json:"additionalBuyerInfo"`

	// alert percentage
	AlertPercentage float64 `json:"alertPercentage,omitempty"`

	// allow custom speed
	AllowCustomSpeed bool `json:"allowCustomSpeed,omitempty"`

	// api available
	APIAvailable bool `json:"apiAvailable,omitempty"`

	// specify the authenticaion key label that will be shown while creating connection
	AuthKeyLabel string `json:"authKeyLabel,omitempty"`

	// connection accessibility
	// Enum: [PUBLIC PRIVATE HYBRID]
	ConnectionAccessibility string `json:"connectionAccessibility,omitempty"`

	// specify the aConnection Names label that will be shown while creating connection
	ConnectionNameLabel string `json:"connectionNameLabel,omitempty"`

	// ctag label
	CtagLabel string `json:"ctagLabel,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// specify if profile is equinix managed or not
	EquinixManagedPortAndVlan bool `json:"equinixManagedPortAndVlan,omitempty"`

	// features
	Features *EnabledFeatures `json:"features,omitempty"`

	// integration Id
	IntegrationID string `json:"integrationId,omitempty"`

	// name of service profile
	Name string `json:"name,omitempty"`

	// named tags
	NamedTags []string `json:"namedTags"`

	// on bandwidth threshold notification
	OnBandwidthThresholdNotification []string `json:"onBandwidthThresholdNotification"`

	// on profile approval reject notification
	OnProfileApprovalRejectNotification []string `json:"onProfileApprovalRejectNotification"`

	// on vc approval rejection notification
	OnVcApprovalRejectionNotification []string `json:"onVcApprovalRejectionNotification"`

	// ports
	Ports []*PortDetail `json:"ports"`

	// private
	Private bool `json:"private,omitempty"`

	// private user emails
	PrivateUserEmails []string `json:"privateUserEmails"`

	// spacify if the redundancy of the connection required or not
	RequiredRedundancy bool `json:"requiredRedundancy,omitempty"`

	// speed bands
	SpeedBands []*SpeedBand `json:"speedBands"`

	// speed from API
	SpeedFromAPI bool `json:"speedFromAPI,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// tag type
	// Enum: [CTAGED BOTH NAMED]
	TagType string `json:"tagType,omitempty"`

	// need only in case of update
	UUID string `json:"uuid,omitempty"`

	// specify if vlan is same as primary or not
	VlanSameAsPrimary bool `json:"vlanSameAsPrimary,omitempty"`
}

// Validate validates this profile model
func (m *ProfileModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalBuyerInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionAccessibility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnBandwidthThresholdNotification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnProfileApprovalRejectNotification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnVcApprovalRejectionNotification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateUserEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeedBands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProfileModel) validateAdditionalBuyerInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalBuyerInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalBuyerInfo); i++ {
		if swag.IsZero(m.AdditionalBuyerInfo[i]) { // not required
			continue
		}

		if m.AdditionalBuyerInfo[i] != nil {
			if err := m.AdditionalBuyerInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalBuyerInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var profileModelTypeConnectionAccessibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PUBLIC","PRIVATE","HYBRID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileModelTypeConnectionAccessibilityPropEnum = append(profileModelTypeConnectionAccessibilityPropEnum, v)
	}
}

const (

	// ProfileModelConnectionAccessibilityPUBLIC captures enum value "PUBLIC"
	ProfileModelConnectionAccessibilityPUBLIC string = "PUBLIC"

	// ProfileModelConnectionAccessibilityPRIVATE captures enum value "PRIVATE"
	ProfileModelConnectionAccessibilityPRIVATE string = "PRIVATE"

	// ProfileModelConnectionAccessibilityHYBRID captures enum value "HYBRID"
	ProfileModelConnectionAccessibilityHYBRID string = "HYBRID"
)

// prop value enum
func (m *ProfileModel) validateConnectionAccessibilityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, profileModelTypeConnectionAccessibilityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProfileModel) validateConnectionAccessibility(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionAccessibility) { // not required
		return nil
	}

	// value enum
	if err := m.validateConnectionAccessibilityEnum("connectionAccessibility", "body", m.ConnectionAccessibility); err != nil {
		return err
	}

	return nil
}

func (m *ProfileModel) validateFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Features) { // not required
		return nil
	}

	if m.Features != nil {
		if err := m.Features.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("features")
			}
			return err
		}
	}

	return nil
}

var profileModelOnBandwidthThresholdNotificationItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sandboxuser@examplecompany.com"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileModelOnBandwidthThresholdNotificationItemsEnum = append(profileModelOnBandwidthThresholdNotificationItemsEnum, v)
	}
}

func (m *ProfileModel) validateOnBandwidthThresholdNotificationItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, profileModelOnBandwidthThresholdNotificationItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProfileModel) validateOnBandwidthThresholdNotification(formats strfmt.Registry) error {

	if swag.IsZero(m.OnBandwidthThresholdNotification) { // not required
		return nil
	}

	for i := 0; i < len(m.OnBandwidthThresholdNotification); i++ {

		// value enum
		if err := m.validateOnBandwidthThresholdNotificationItemsEnum("onBandwidthThresholdNotification"+"."+strconv.Itoa(i), "body", m.OnBandwidthThresholdNotification[i]); err != nil {
			return err
		}

	}

	return nil
}

var profileModelOnProfileApprovalRejectNotificationItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sandboxuser@examplecompany.com"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileModelOnProfileApprovalRejectNotificationItemsEnum = append(profileModelOnProfileApprovalRejectNotificationItemsEnum, v)
	}
}

func (m *ProfileModel) validateOnProfileApprovalRejectNotificationItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, profileModelOnProfileApprovalRejectNotificationItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProfileModel) validateOnProfileApprovalRejectNotification(formats strfmt.Registry) error {

	if swag.IsZero(m.OnProfileApprovalRejectNotification) { // not required
		return nil
	}

	for i := 0; i < len(m.OnProfileApprovalRejectNotification); i++ {

		// value enum
		if err := m.validateOnProfileApprovalRejectNotificationItemsEnum("onProfileApprovalRejectNotification"+"."+strconv.Itoa(i), "body", m.OnProfileApprovalRejectNotification[i]); err != nil {
			return err
		}

	}

	return nil
}

var profileModelOnVcApprovalRejectionNotificationItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["test@test.com"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileModelOnVcApprovalRejectionNotificationItemsEnum = append(profileModelOnVcApprovalRejectionNotificationItemsEnum, v)
	}
}

func (m *ProfileModel) validateOnVcApprovalRejectionNotificationItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, profileModelOnVcApprovalRejectionNotificationItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProfileModel) validateOnVcApprovalRejectionNotification(formats strfmt.Registry) error {

	if swag.IsZero(m.OnVcApprovalRejectionNotification) { // not required
		return nil
	}

	for i := 0; i < len(m.OnVcApprovalRejectionNotification); i++ {

		// value enum
		if err := m.validateOnVcApprovalRejectionNotificationItemsEnum("onVcApprovalRejectionNotification"+"."+strconv.Itoa(i), "body", m.OnVcApprovalRejectionNotification[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ProfileModel) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var profileModelPrivateUserEmailsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sandboxuser@examplecompany.com"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileModelPrivateUserEmailsItemsEnum = append(profileModelPrivateUserEmailsItemsEnum, v)
	}
}

func (m *ProfileModel) validatePrivateUserEmailsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, profileModelPrivateUserEmailsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProfileModel) validatePrivateUserEmails(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateUserEmails) { // not required
		return nil
	}

	for i := 0; i < len(m.PrivateUserEmails); i++ {

		// value enum
		if err := m.validatePrivateUserEmailsItemsEnum("privateUserEmails"+"."+strconv.Itoa(i), "body", m.PrivateUserEmails[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ProfileModel) validateSpeedBands(formats strfmt.Registry) error {

	if swag.IsZero(m.SpeedBands) { // not required
		return nil
	}

	for i := 0; i < len(m.SpeedBands); i++ {
		if swag.IsZero(m.SpeedBands[i]) { // not required
			continue
		}

		if m.SpeedBands[i] != nil {
			if err := m.SpeedBands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("speedBands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var profileModelTypeTagTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CTAGED","BOTH","NAMED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileModelTypeTagTypePropEnum = append(profileModelTypeTagTypePropEnum, v)
	}
}

const (

	// ProfileModelTagTypeCTAGED captures enum value "CTAGED"
	ProfileModelTagTypeCTAGED string = "CTAGED"

	// ProfileModelTagTypeBOTH captures enum value "BOTH"
	ProfileModelTagTypeBOTH string = "BOTH"

	// ProfileModelTagTypeNAMED captures enum value "NAMED"
	ProfileModelTagTypeNAMED string = "NAMED"
)

// prop value enum
func (m *ProfileModel) validateTagTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, profileModelTypeTagTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProfileModel) validateTagType(formats strfmt.Registry) error {

	if swag.IsZero(m.TagType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTagTypeEnum("tagType", "body", m.TagType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProfileModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProfileModel) UnmarshalBinary(b []byte) error {
	var res ProfileModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
