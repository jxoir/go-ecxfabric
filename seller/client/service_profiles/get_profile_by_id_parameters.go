// Code generated by go-swagger; DO NOT EDIT.

package service_profiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetProfileByIDParams creates a new GetProfileByIDParams object
// with the default values initialized.
func NewGetProfileByIDParams() *GetProfileByIDParams {
	var ()
	return &GetProfileByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetProfileByIDParamsWithTimeout creates a new GetProfileByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetProfileByIDParamsWithTimeout(timeout time.Duration) *GetProfileByIDParams {
	var ()
	return &GetProfileByIDParams{

		timeout: timeout,
	}
}

// NewGetProfileByIDParamsWithContext creates a new GetProfileByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetProfileByIDParamsWithContext(ctx context.Context) *GetProfileByIDParams {
	var ()
	return &GetProfileByIDParams{

		Context: ctx,
	}
}

// NewGetProfileByIDParamsWithHTTPClient creates a new GetProfileByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetProfileByIDParamsWithHTTPClient(client *http.Client) *GetProfileByIDParams {
	var ()
	return &GetProfileByIDParams{
		HTTPClient: client,
	}
}

/*GetProfileByIDParams contains all the parameters to send to the API endpoint
for the get profile by Id operation typically these are written to a http.Request
*/
type GetProfileByIDParams struct {

	/*Authorization
	  Specify the OAuth Bearer token with prefix 'Bearer '.

	*/
	Authorization string
	/*UUID
	  uuid

	*/
	UUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get profile by Id params
func (o *GetProfileByIDParams) WithTimeout(timeout time.Duration) *GetProfileByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get profile by Id params
func (o *GetProfileByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get profile by Id params
func (o *GetProfileByIDParams) WithContext(ctx context.Context) *GetProfileByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get profile by Id params
func (o *GetProfileByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get profile by Id params
func (o *GetProfileByIDParams) WithHTTPClient(client *http.Client) *GetProfileByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get profile by Id params
func (o *GetProfileByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get profile by Id params
func (o *GetProfileByIDParams) WithAuthorization(authorization string) *GetProfileByIDParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get profile by Id params
func (o *GetProfileByIDParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithUUID adds the uuid to the get profile by Id params
func (o *GetProfileByIDParams) WithUUID(uuid string) *GetProfileByIDParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the get profile by Id params
func (o *GetProfileByIDParams) SetUUID(uuid string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *GetProfileByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
