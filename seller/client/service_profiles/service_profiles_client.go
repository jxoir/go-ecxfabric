// Code generated by go-swagger; DO NOT EDIT.

package service_profiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new service profiles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service profiles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateServiceProfileUsingPOST creates service profile for l2

This is the API used to create a new service profile which allows an ECX participant to offer their services on the ECX Fabric platform. The API has parameters such as what bandwidths to make available, what information to request from customers wishing to connect, the type of service profiles being created (private/public) and other information about how an ECX participant may want to offer their services. Please refer to the ECX documentation for more information about the creation of service profiles.
*/
func (a *Client) CreateServiceProfileUsingPOST(params *CreateServiceProfileUsingPOSTParams) (*CreateServiceProfileUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceProfileUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createServiceProfileUsingPOST",
		Method:             "POST",
		PathPattern:        "/ecx/v3/l2/serviceprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateServiceProfileUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateServiceProfileUsingPOSTOK), nil

}

/*
CreateServiceProfilesUsingPOST creates service profile

This API is used to create Service Profiles
*/
func (a *Client) CreateServiceProfilesUsingPOST(params *CreateServiceProfilesUsingPOSTParams) (*CreateServiceProfilesUsingPOSTCreated, *CreateServiceProfilesUsingPOSTNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceProfilesUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createServiceProfilesUsingPOST",
		Method:             "POST",
		PathPattern:        "/ecx/v3/l3/serviceprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateServiceProfilesUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateServiceProfilesUsingPOSTCreated:
		return value, nil, nil
	case *CreateServiceProfilesUsingPOSTNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteProfileByIDUsingDELETE deletes seller profile for given uuid
*/
func (a *Client) DeleteProfileByIDUsingDELETE(params *DeleteProfileByIDUsingDELETEParams) (*DeleteProfileByIDUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProfileByIDUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProfileByIdUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/ecx/v3/l3/serviceprofiles/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProfileByIDUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProfileByIDUsingDELETENoContent), nil

}

/*
DeleteProfileByProfileNameOrUUIDUsingDELETE deletes service profile based on profile name or uuid

This API will delete a service profile based on the service profile name or uuid (the unique identifier associated with the service). The expected response would be that the deletion was successful.
*/
func (a *Client) DeleteProfileByProfileNameOrUUIDUsingDELETE(params *DeleteProfileByProfileNameOrUUIDUsingDELETEParams) (*DeleteProfileByProfileNameOrUUIDUsingDELETEOK, *DeleteProfileByProfileNameOrUUIDUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProfileByProfileNameOrUUIDUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProfileByProfileNameOrUUIDUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/ecx/v3/l2/serviceprofiles/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProfileByProfileNameOrUUIDUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteProfileByProfileNameOrUUIDUsingDELETEOK:
		return value, nil, nil
	case *DeleteProfileByProfileNameOrUUIDUsingDELETENoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
EditL3ServiceProfileUsingPUT updates service profile

API returns update seller profile details
*/
func (a *Client) EditL3ServiceProfileUsingPUT(params *EditL3ServiceProfileUsingPUTParams) (*EditL3ServiceProfileUsingPUTOK, *EditL3ServiceProfileUsingPUTNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditL3ServiceProfileUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "editL3ServiceProfileUsingPUT",
		Method:             "PUT",
		PathPattern:        "/ecx/v3/l3/serviceprofiles/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EditL3ServiceProfileUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *EditL3ServiceProfileUsingPUTOK:
		return value, nil, nil
	case *EditL3ServiceProfileUsingPUTNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetAllSellerProfileUsingGET returns all service profiles

The GET Service Profiles API will return detailed information about all ECX service profiles. The parameters include a state field that can be set to one of the following- pending approval, approved, rejected or deleted. The information returned via the API includes all information about the service profiles as well as the ports associated with each of these profiles.
*/
func (a *Client) GetAllSellerProfileUsingGET(params *GetAllSellerProfileUsingGETParams) (*GetAllSellerProfileUsingGETOK, *GetAllSellerProfileUsingGETNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSellerProfileUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllSellerProfileUsingGET",
		Method:             "GET",
		PathPattern:        "/ecx/v3/l2/serviceprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllSellerProfileUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAllSellerProfileUsingGETOK:
		return value, nil, nil
	case *GetAllSellerProfileUsingGETNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetAllServiceProfilesUsingGET returns list of service profiles

This API is used to get all Service Profiles with respective to query params
*/
func (a *Client) GetAllServiceProfilesUsingGET(params *GetAllServiceProfilesUsingGETParams) (*GetAllServiceProfilesUsingGETOK, *GetAllServiceProfilesUsingGETNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllServiceProfilesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllServiceProfilesUsingGET",
		Method:             "GET",
		PathPattern:        "/ecx/v3/l3/serviceprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllServiceProfilesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAllServiceProfilesUsingGETOK:
		return value, nil, nil
	case *GetAllServiceProfilesUsingGETNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetProfileByID fetches seller profile based on uuid
*/
func (a *Client) GetProfileByID(params *GetProfileByIDParams) (*GetProfileByIDOK, *GetProfileByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProfileByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProfileById",
		Method:             "GET",
		PathPattern:        "/ecx/v3/l3/serviceprofiles/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProfileByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetProfileByIDOK:
		return value, nil, nil
	case *GetProfileByIDNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetProfileByIDOrNameUsingGET returns service profile based on search criteria profile name or uuid

This API returns details about all service profiles that meet a particular search criterion which can be either the profile name or the uuid (the unique identifier associated with a service).
*/
func (a *Client) GetProfileByIDOrNameUsingGET(params *GetProfileByIDOrNameUsingGETParams) (*GetProfileByIDOrNameUsingGETOK, *GetProfileByIDOrNameUsingGETNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProfileByIDOrNameUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProfileByIdOrNameUsingGET",
		Method:             "GET",
		PathPattern:        "/ecx/v3/l2/serviceprofiles/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProfileByIDOrNameUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetProfileByIDOrNameUsingGETOK:
		return value, nil, nil
	case *GetProfileByIDOrNameUsingGETNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
UpdateL2ServiceProfileUsingPUT updates service profile for l2

This API allows ECX participants to make changes to their existing Layer 2 service profile. The payload includes all the fields required for creation of a service profile but will include the updated fields that are allowed to be changed. For example, participants have the ability to set a threshold percentage in their service profile for which they will be notified if the allocated/purchased bandwidth on their ports that are associated with that profile exceeds the threshold. This threshold percentage can be changed by using the PUT service profiles API.
*/
func (a *Client) UpdateL2ServiceProfileUsingPUT(params *UpdateL2ServiceProfileUsingPUTParams) (*UpdateL2ServiceProfileUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateL2ServiceProfileUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateL2ServiceProfileUsingPUT",
		Method:             "PUT",
		PathPattern:        "/ecx/v3/l2/serviceprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateL2ServiceProfileUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateL2ServiceProfileUsingPUTOK), nil

}

/*
ValidateIntegrationIDUsingGET validates integration id

As some destinations on the ECX Fabric platform have been integrated with the ECX APIs (ex. AWS and Azure), this API is used to validate an integration id and returns all the regions that are associated with that destination (Ex. AWS East Region 1, etc.).
*/
func (a *Client) ValidateIntegrationIDUsingGET(params *ValidateIntegrationIDUsingGETParams) (*ValidateIntegrationIDUsingGETOK, *ValidateIntegrationIDUsingGETNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateIntegrationIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateIntegrationIdUsingGET",
		Method:             "GET",
		PathPattern:        "/ecx/v3/l2/serviceprofiles/validateIntegrationId/{integrationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateIntegrationIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateIntegrationIDUsingGETOK:
		return value, nil, nil
	case *ValidateIntegrationIDUsingGETNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
