// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSellerConnectionsUsingGETParams creates a new GetSellerConnectionsUsingGETParams object
// with the default values initialized.
func NewGetSellerConnectionsUsingGETParams() *GetSellerConnectionsUsingGETParams {
	var (
		pageNumberDefault = int32(0)
		pageSizeDefault   = int32(20)
	)
	return &GetSellerConnectionsUsingGETParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSellerConnectionsUsingGETParamsWithTimeout creates a new GetSellerConnectionsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSellerConnectionsUsingGETParamsWithTimeout(timeout time.Duration) *GetSellerConnectionsUsingGETParams {
	var (
		pageNumberDefault = int32(0)
		pageSizeDefault   = int32(20)
	)
	return &GetSellerConnectionsUsingGETParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		timeout: timeout,
	}
}

// NewGetSellerConnectionsUsingGETParamsWithContext creates a new GetSellerConnectionsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSellerConnectionsUsingGETParamsWithContext(ctx context.Context) *GetSellerConnectionsUsingGETParams {
	var (
		pageNumberDefault = int32(0)
		pageSizeDefault   = int32(20)
	)
	return &GetSellerConnectionsUsingGETParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		Context: ctx,
	}
}

// NewGetSellerConnectionsUsingGETParamsWithHTTPClient creates a new GetSellerConnectionsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSellerConnectionsUsingGETParamsWithHTTPClient(client *http.Client) *GetSellerConnectionsUsingGETParams {
	var (
		pageNumberDefault = int32(0)
		pageSizeDefault   = int32(20)
	)
	return &GetSellerConnectionsUsingGETParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		HTTPClient: client,
	}
}

/*GetSellerConnectionsUsingGETParams contains all the parameters to send to the API endpoint
for the get seller connections using g e t operation typically these are written to a http.Request
*/
type GetSellerConnectionsUsingGETParams struct {

	/*Authorization
	  Specify the OAuth Bearer token with prefix 'Bearer '.

	*/
	Authorization string
	/*MetroCode
	  Seller metro code

	*/
	MetroCode *string
	/*PageNumber
	  page number

	*/
	PageNumber *int32
	/*PageSize
	  total number of records

	*/
	PageSize *int32
	/*PortName
	  Seller port name

	*/
	PortName *string
	/*ProfileID
	  Seller service profile id

	*/
	ProfileID *string
	/*State
	  Seller connection status

	*/
	State *string
	/*Status
	  connection status

	*/
	Status []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) WithTimeout(timeout time.Duration) *GetSellerConnectionsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) WithContext(ctx context.Context) *GetSellerConnectionsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) WithHTTPClient(client *http.Client) *GetSellerConnectionsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) WithAuthorization(authorization string) *GetSellerConnectionsUsingGETParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithMetroCode adds the metroCode to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) WithMetroCode(metroCode *string) *GetSellerConnectionsUsingGETParams {
	o.SetMetroCode(metroCode)
	return o
}

// SetMetroCode adds the metroCode to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) SetMetroCode(metroCode *string) {
	o.MetroCode = metroCode
}

// WithPageNumber adds the pageNumber to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) WithPageNumber(pageNumber *int32) *GetSellerConnectionsUsingGETParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) WithPageSize(pageSize *int32) *GetSellerConnectionsUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPortName adds the portName to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) WithPortName(portName *string) *GetSellerConnectionsUsingGETParams {
	o.SetPortName(portName)
	return o
}

// SetPortName adds the portName to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) SetPortName(portName *string) {
	o.PortName = portName
}

// WithProfileID adds the profileID to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) WithProfileID(profileID *string) *GetSellerConnectionsUsingGETParams {
	o.SetProfileID(profileID)
	return o
}

// SetProfileID adds the profileId to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) SetProfileID(profileID *string) {
	o.ProfileID = profileID
}

// WithState adds the state to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) WithState(state *string) *GetSellerConnectionsUsingGETParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) SetState(state *string) {
	o.State = state
}

// WithStatus adds the status to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) WithStatus(status []string) *GetSellerConnectionsUsingGETParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get seller connections using g e t params
func (o *GetSellerConnectionsUsingGETParams) SetStatus(status []string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetSellerConnectionsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.MetroCode != nil {

		// query param metroCode
		var qrMetroCode string
		if o.MetroCode != nil {
			qrMetroCode = *o.MetroCode
		}
		qMetroCode := qrMetroCode
		if qMetroCode != "" {
			if err := r.SetQueryParam("metroCode", qMetroCode); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.PortName != nil {

		// query param portName
		var qrPortName string
		if o.PortName != nil {
			qrPortName = *o.PortName
		}
		qPortName := qrPortName
		if qPortName != "" {
			if err := r.SetQueryParam("portName", qPortName); err != nil {
				return err
			}
		}

	}

	if o.ProfileID != nil {

		// query param profileId
		var qrProfileID string
		if o.ProfileID != nil {
			qrProfileID = *o.ProfileID
		}
		qProfileID := qrProfileID
		if qProfileID != "" {
			if err := r.SetQueryParam("profileId", qProfileID); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	valuesStatus := o.Status

	joinedStatus := swag.JoinByFormat(valuesStatus, "multi")
	// query array param status
	if err := r.SetQueryParam("status", joinedStatus...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
