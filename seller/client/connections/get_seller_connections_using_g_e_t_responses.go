// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jxoir/go-ecxfabric/seller/models"
)

// GetSellerConnectionsUsingGETReader is a Reader for the GetSellerConnectionsUsingGET structure.
type GetSellerConnectionsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSellerConnectionsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSellerConnectionsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewGetSellerConnectionsUsingGETNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSellerConnectionsUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSellerConnectionsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetSellerConnectionsUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSellerConnectionsUsingGETOK creates a GetSellerConnectionsUsingGETOK with default headers values
func NewGetSellerConnectionsUsingGETOK() *GetSellerConnectionsUsingGETOK {
	return &GetSellerConnectionsUsingGETOK{}
}

/*GetSellerConnectionsUsingGETOK handles this case with default header values.

OK
*/
type GetSellerConnectionsUsingGETOK struct {
	Payload *models.GetSellerCOnResp
}

func (o *GetSellerConnectionsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/seller/connections][%d] getSellerConnectionsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetSellerConnectionsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetSellerCOnResp)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSellerConnectionsUsingGETNoContent creates a GetSellerConnectionsUsingGETNoContent with default headers values
func NewGetSellerConnectionsUsingGETNoContent() *GetSellerConnectionsUsingGETNoContent {
	return &GetSellerConnectionsUsingGETNoContent{}
}

/*GetSellerConnectionsUsingGETNoContent handles this case with default header values.

No Content
*/
type GetSellerConnectionsUsingGETNoContent struct {
}

func (o *GetSellerConnectionsUsingGETNoContent) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/seller/connections][%d] getSellerConnectionsUsingGETNoContent ", 204)
}

func (o *GetSellerConnectionsUsingGETNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSellerConnectionsUsingGETBadRequest creates a GetSellerConnectionsUsingGETBadRequest with default headers values
func NewGetSellerConnectionsUsingGETBadRequest() *GetSellerConnectionsUsingGETBadRequest {
	return &GetSellerConnectionsUsingGETBadRequest{}
}

/*GetSellerConnectionsUsingGETBadRequest handles this case with default header values.

Bad Request
*/
type GetSellerConnectionsUsingGETBadRequest struct {
	Payload models.ErrorResponseArray
}

func (o *GetSellerConnectionsUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/seller/connections][%d] getSellerConnectionsUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetSellerConnectionsUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSellerConnectionsUsingGETNotFound creates a GetSellerConnectionsUsingGETNotFound with default headers values
func NewGetSellerConnectionsUsingGETNotFound() *GetSellerConnectionsUsingGETNotFound {
	return &GetSellerConnectionsUsingGETNotFound{}
}

/*GetSellerConnectionsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetSellerConnectionsUsingGETNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetSellerConnectionsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/seller/connections][%d] getSellerConnectionsUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetSellerConnectionsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSellerConnectionsUsingGETInternalServerError creates a GetSellerConnectionsUsingGETInternalServerError with default headers values
func NewGetSellerConnectionsUsingGETInternalServerError() *GetSellerConnectionsUsingGETInternalServerError {
	return &GetSellerConnectionsUsingGETInternalServerError{}
}

/*GetSellerConnectionsUsingGETInternalServerError handles this case with default header values.

Internal server error
*/
type GetSellerConnectionsUsingGETInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetSellerConnectionsUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/seller/connections][%d] getSellerConnectionsUsingGETInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSellerConnectionsUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
