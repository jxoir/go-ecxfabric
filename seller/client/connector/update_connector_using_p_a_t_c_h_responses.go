// Code generated by go-swagger; DO NOT EDIT.

package connector

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jxoir/go-ecxfabric/seller/models"
)

// UpdateConnectorUsingPATCHReader is a Reader for the UpdateConnectorUsingPATCH structure.
type UpdateConnectorUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateConnectorUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewUpdateConnectorUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateConnectorUsingPATCHBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateConnectorUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateConnectorUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewUpdateConnectorUsingPATCHMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateConnectorUsingPATCHConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateConnectorUsingPATCHInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewUpdateConnectorUsingPATCHServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateConnectorUsingPATCHNoContent creates a UpdateConnectorUsingPATCHNoContent with default headers values
func NewUpdateConnectorUsingPATCHNoContent() *UpdateConnectorUsingPATCHNoContent {
	return &UpdateConnectorUsingPATCHNoContent{}
}

/*UpdateConnectorUsingPATCHNoContent handles this case with default header values.

OK
*/
type UpdateConnectorUsingPATCHNoContent struct {
}

func (o *UpdateConnectorUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /ecx/v3/l3/connector/{uuid}][%d] updateConnectorUsingPATCHNoContent ", 204)
}

func (o *UpdateConnectorUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateConnectorUsingPATCHBadRequest creates a UpdateConnectorUsingPATCHBadRequest with default headers values
func NewUpdateConnectorUsingPATCHBadRequest() *UpdateConnectorUsingPATCHBadRequest {
	return &UpdateConnectorUsingPATCHBadRequest{}
}

/*UpdateConnectorUsingPATCHBadRequest handles this case with default header values.

Bad request
*/
type UpdateConnectorUsingPATCHBadRequest struct {
	Payload models.GeneralErrorMessage
}

func (o *UpdateConnectorUsingPATCHBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /ecx/v3/l3/connector/{uuid}][%d] updateConnectorUsingPATCHBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateConnectorUsingPATCHBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConnectorUsingPATCHUnauthorized creates a UpdateConnectorUsingPATCHUnauthorized with default headers values
func NewUpdateConnectorUsingPATCHUnauthorized() *UpdateConnectorUsingPATCHUnauthorized {
	return &UpdateConnectorUsingPATCHUnauthorized{}
}

/*UpdateConnectorUsingPATCHUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateConnectorUsingPATCHUnauthorized struct {
	Payload models.GeneralErrorMessage
}

func (o *UpdateConnectorUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /ecx/v3/l3/connector/{uuid}][%d] updateConnectorUsingPATCHUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateConnectorUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConnectorUsingPATCHForbidden creates a UpdateConnectorUsingPATCHForbidden with default headers values
func NewUpdateConnectorUsingPATCHForbidden() *UpdateConnectorUsingPATCHForbidden {
	return &UpdateConnectorUsingPATCHForbidden{}
}

/*UpdateConnectorUsingPATCHForbidden handles this case with default header values.

Forbidden
*/
type UpdateConnectorUsingPATCHForbidden struct {
	Payload models.GeneralErrorMessage
}

func (o *UpdateConnectorUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /ecx/v3/l3/connector/{uuid}][%d] updateConnectorUsingPATCHForbidden  %+v", 403, o.Payload)
}

func (o *UpdateConnectorUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConnectorUsingPATCHMethodNotAllowed creates a UpdateConnectorUsingPATCHMethodNotAllowed with default headers values
func NewUpdateConnectorUsingPATCHMethodNotAllowed() *UpdateConnectorUsingPATCHMethodNotAllowed {
	return &UpdateConnectorUsingPATCHMethodNotAllowed{}
}

/*UpdateConnectorUsingPATCHMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type UpdateConnectorUsingPATCHMethodNotAllowed struct {
	Payload models.GeneralErrorMessage
}

func (o *UpdateConnectorUsingPATCHMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /ecx/v3/l3/connector/{uuid}][%d] updateConnectorUsingPATCHMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateConnectorUsingPATCHMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConnectorUsingPATCHConflict creates a UpdateConnectorUsingPATCHConflict with default headers values
func NewUpdateConnectorUsingPATCHConflict() *UpdateConnectorUsingPATCHConflict {
	return &UpdateConnectorUsingPATCHConflict{}
}

/*UpdateConnectorUsingPATCHConflict handles this case with default header values.

Conflict
*/
type UpdateConnectorUsingPATCHConflict struct {
	Payload models.GeneralErrorMessage
}

func (o *UpdateConnectorUsingPATCHConflict) Error() string {
	return fmt.Sprintf("[PATCH /ecx/v3/l3/connector/{uuid}][%d] updateConnectorUsingPATCHConflict  %+v", 409, o.Payload)
}

func (o *UpdateConnectorUsingPATCHConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConnectorUsingPATCHInternalServerError creates a UpdateConnectorUsingPATCHInternalServerError with default headers values
func NewUpdateConnectorUsingPATCHInternalServerError() *UpdateConnectorUsingPATCHInternalServerError {
	return &UpdateConnectorUsingPATCHInternalServerError{}
}

/*UpdateConnectorUsingPATCHInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateConnectorUsingPATCHInternalServerError struct {
	Payload models.GeneralErrorMessage
}

func (o *UpdateConnectorUsingPATCHInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /ecx/v3/l3/connector/{uuid}][%d] updateConnectorUsingPATCHInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateConnectorUsingPATCHInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConnectorUsingPATCHServiceUnavailable creates a UpdateConnectorUsingPATCHServiceUnavailable with default headers values
func NewUpdateConnectorUsingPATCHServiceUnavailable() *UpdateConnectorUsingPATCHServiceUnavailable {
	return &UpdateConnectorUsingPATCHServiceUnavailable{}
}

/*UpdateConnectorUsingPATCHServiceUnavailable handles this case with default header values.

Service Unavailable
*/
type UpdateConnectorUsingPATCHServiceUnavailable struct {
	Payload models.GeneralErrorMessage
}

func (o *UpdateConnectorUsingPATCHServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /ecx/v3/l3/connector/{uuid}][%d] updateConnectorUsingPATCHServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateConnectorUsingPATCHServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
