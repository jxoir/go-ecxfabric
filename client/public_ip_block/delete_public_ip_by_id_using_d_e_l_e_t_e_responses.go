// Code generated by go-swagger; DO NOT EDIT.

package public_ip_block

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jxoir/go-ecxfabric/models"
)

// DeletePublicIPByIDUsingDELETEReader is a Reader for the DeletePublicIPByIDUsingDELETE structure.
type DeletePublicIPByIDUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePublicIPByIDUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeletePublicIPByIDUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeletePublicIPByIDUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeletePublicIPByIDUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewDeletePublicIPByIDUsingDELETEMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewDeletePublicIPByIDUsingDELETEConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeletePublicIPByIDUsingDELETEInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewDeletePublicIPByIDUsingDELETEServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeletePublicIPByIDUsingDELETEOK creates a DeletePublicIPByIDUsingDELETEOK with default headers values
func NewDeletePublicIPByIDUsingDELETEOK() *DeletePublicIPByIDUsingDELETEOK {
	return &DeletePublicIPByIDUsingDELETEOK{}
}

/*DeletePublicIPByIDUsingDELETEOK handles this case with default header values.

Success
*/
type DeletePublicIPByIDUsingDELETEOK struct {
}

func (o *DeletePublicIPByIDUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /ecx/v3/l3/publicIpAddress/{uuid}][%d] deletePublicIpByIdUsingDELETEOK ", 200)
}

func (o *DeletePublicIPByIDUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePublicIPByIDUsingDELETEUnauthorized creates a DeletePublicIPByIDUsingDELETEUnauthorized with default headers values
func NewDeletePublicIPByIDUsingDELETEUnauthorized() *DeletePublicIPByIDUsingDELETEUnauthorized {
	return &DeletePublicIPByIDUsingDELETEUnauthorized{}
}

/*DeletePublicIPByIDUsingDELETEUnauthorized handles this case with default header values.

Unauthorized
*/
type DeletePublicIPByIDUsingDELETEUnauthorized struct {
	Payload models.GeneralErrorMessage
}

func (o *DeletePublicIPByIDUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /ecx/v3/l3/publicIpAddress/{uuid}][%d] deletePublicIpByIdUsingDELETEUnauthorized  %+v", 401, o.Payload)
}

func (o *DeletePublicIPByIDUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePublicIPByIDUsingDELETEForbidden creates a DeletePublicIPByIDUsingDELETEForbidden with default headers values
func NewDeletePublicIPByIDUsingDELETEForbidden() *DeletePublicIPByIDUsingDELETEForbidden {
	return &DeletePublicIPByIDUsingDELETEForbidden{}
}

/*DeletePublicIPByIDUsingDELETEForbidden handles this case with default header values.

Forbidden
*/
type DeletePublicIPByIDUsingDELETEForbidden struct {
	Payload models.GeneralErrorMessage
}

func (o *DeletePublicIPByIDUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /ecx/v3/l3/publicIpAddress/{uuid}][%d] deletePublicIpByIdUsingDELETEForbidden  %+v", 403, o.Payload)
}

func (o *DeletePublicIPByIDUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePublicIPByIDUsingDELETEMethodNotAllowed creates a DeletePublicIPByIDUsingDELETEMethodNotAllowed with default headers values
func NewDeletePublicIPByIDUsingDELETEMethodNotAllowed() *DeletePublicIPByIDUsingDELETEMethodNotAllowed {
	return &DeletePublicIPByIDUsingDELETEMethodNotAllowed{}
}

/*DeletePublicIPByIDUsingDELETEMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type DeletePublicIPByIDUsingDELETEMethodNotAllowed struct {
	Payload models.GeneralErrorMessage
}

func (o *DeletePublicIPByIDUsingDELETEMethodNotAllowed) Error() string {
	return fmt.Sprintf("[DELETE /ecx/v3/l3/publicIpAddress/{uuid}][%d] deletePublicIpByIdUsingDELETEMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *DeletePublicIPByIDUsingDELETEMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePublicIPByIDUsingDELETEConflict creates a DeletePublicIPByIDUsingDELETEConflict with default headers values
func NewDeletePublicIPByIDUsingDELETEConflict() *DeletePublicIPByIDUsingDELETEConflict {
	return &DeletePublicIPByIDUsingDELETEConflict{}
}

/*DeletePublicIPByIDUsingDELETEConflict handles this case with default header values.

Conflict
*/
type DeletePublicIPByIDUsingDELETEConflict struct {
	Payload models.GeneralErrorMessage
}

func (o *DeletePublicIPByIDUsingDELETEConflict) Error() string {
	return fmt.Sprintf("[DELETE /ecx/v3/l3/publicIpAddress/{uuid}][%d] deletePublicIpByIdUsingDELETEConflict  %+v", 409, o.Payload)
}

func (o *DeletePublicIPByIDUsingDELETEConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePublicIPByIDUsingDELETEInternalServerError creates a DeletePublicIPByIDUsingDELETEInternalServerError with default headers values
func NewDeletePublicIPByIDUsingDELETEInternalServerError() *DeletePublicIPByIDUsingDELETEInternalServerError {
	return &DeletePublicIPByIDUsingDELETEInternalServerError{}
}

/*DeletePublicIPByIDUsingDELETEInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeletePublicIPByIDUsingDELETEInternalServerError struct {
	Payload models.GeneralErrorMessage
}

func (o *DeletePublicIPByIDUsingDELETEInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /ecx/v3/l3/publicIpAddress/{uuid}][%d] deletePublicIpByIdUsingDELETEInternalServerError  %+v", 500, o.Payload)
}

func (o *DeletePublicIPByIDUsingDELETEInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePublicIPByIDUsingDELETEServiceUnavailable creates a DeletePublicIPByIDUsingDELETEServiceUnavailable with default headers values
func NewDeletePublicIPByIDUsingDELETEServiceUnavailable() *DeletePublicIPByIDUsingDELETEServiceUnavailable {
	return &DeletePublicIPByIDUsingDELETEServiceUnavailable{}
}

/*DeletePublicIPByIDUsingDELETEServiceUnavailable handles this case with default header values.

Service Unavailable
*/
type DeletePublicIPByIDUsingDELETEServiceUnavailable struct {
	Payload models.GeneralErrorMessage
}

func (o *DeletePublicIPByIDUsingDELETEServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /ecx/v3/l3/publicIpAddress/{uuid}][%d] deletePublicIpByIdUsingDELETEServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeletePublicIPByIDUsingDELETEServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
