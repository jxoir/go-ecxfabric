// Code generated by go-swagger; DO NOT EDIT.

package public_ip_block

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAllPublicIPUsingGETParams creates a new GetAllPublicIPUsingGETParams object
// with the default values initialized.
func NewGetAllPublicIPUsingGETParams() *GetAllPublicIPUsingGETParams {
	var (
		pageDefault  = int32(0)
		totalDefault = int32(20)
	)
	return &GetAllPublicIPUsingGETParams{
		Page:  &pageDefault,
		Total: &totalDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllPublicIPUsingGETParamsWithTimeout creates a new GetAllPublicIPUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAllPublicIPUsingGETParamsWithTimeout(timeout time.Duration) *GetAllPublicIPUsingGETParams {
	var (
		pageDefault  = int32(0)
		totalDefault = int32(20)
	)
	return &GetAllPublicIPUsingGETParams{
		Page:  &pageDefault,
		Total: &totalDefault,

		timeout: timeout,
	}
}

// NewGetAllPublicIPUsingGETParamsWithContext creates a new GetAllPublicIPUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAllPublicIPUsingGETParamsWithContext(ctx context.Context) *GetAllPublicIPUsingGETParams {
	var (
		pageDefault  = int32(0)
		totalDefault = int32(20)
	)
	return &GetAllPublicIPUsingGETParams{
		Page:  &pageDefault,
		Total: &totalDefault,

		Context: ctx,
	}
}

// NewGetAllPublicIPUsingGETParamsWithHTTPClient creates a new GetAllPublicIPUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAllPublicIPUsingGETParamsWithHTTPClient(client *http.Client) *GetAllPublicIPUsingGETParams {
	var (
		pageDefault  = int32(0)
		totalDefault = int32(20)
	)
	return &GetAllPublicIPUsingGETParams{
		Page:       &pageDefault,
		Total:      &totalDefault,
		HTTPClient: client,
	}
}

/*GetAllPublicIPUsingGETParams contains all the parameters to send to the API endpoint
for the get all public IP using g e t operation typically these are written to a http.Request
*/
type GetAllPublicIPUsingGETParams struct {

	/*Authorization
	  Specify the OAuth Bearer token with prefix 'Bearer '.

	*/
	Authorization string
	/*MetroCode
	  metroCode

	*/
	MetroCode *string
	/*Page
	  page

	*/
	Page *int32
	/*Total
	  total

	*/
	Total *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get all public IP using g e t params
func (o *GetAllPublicIPUsingGETParams) WithTimeout(timeout time.Duration) *GetAllPublicIPUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all public IP using g e t params
func (o *GetAllPublicIPUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all public IP using g e t params
func (o *GetAllPublicIPUsingGETParams) WithContext(ctx context.Context) *GetAllPublicIPUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all public IP using g e t params
func (o *GetAllPublicIPUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all public IP using g e t params
func (o *GetAllPublicIPUsingGETParams) WithHTTPClient(client *http.Client) *GetAllPublicIPUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all public IP using g e t params
func (o *GetAllPublicIPUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get all public IP using g e t params
func (o *GetAllPublicIPUsingGETParams) WithAuthorization(authorization string) *GetAllPublicIPUsingGETParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get all public IP using g e t params
func (o *GetAllPublicIPUsingGETParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithMetroCode adds the metroCode to the get all public IP using g e t params
func (o *GetAllPublicIPUsingGETParams) WithMetroCode(metroCode *string) *GetAllPublicIPUsingGETParams {
	o.SetMetroCode(metroCode)
	return o
}

// SetMetroCode adds the metroCode to the get all public IP using g e t params
func (o *GetAllPublicIPUsingGETParams) SetMetroCode(metroCode *string) {
	o.MetroCode = metroCode
}

// WithPage adds the page to the get all public IP using g e t params
func (o *GetAllPublicIPUsingGETParams) WithPage(page *int32) *GetAllPublicIPUsingGETParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get all public IP using g e t params
func (o *GetAllPublicIPUsingGETParams) SetPage(page *int32) {
	o.Page = page
}

// WithTotal adds the total to the get all public IP using g e t params
func (o *GetAllPublicIPUsingGETParams) WithTotal(total *int32) *GetAllPublicIPUsingGETParams {
	o.SetTotal(total)
	return o
}

// SetTotal adds the total to the get all public IP using g e t params
func (o *GetAllPublicIPUsingGETParams) SetTotal(total *int32) {
	o.Total = total
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllPublicIPUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.MetroCode != nil {

		// query param metroCode
		var qrMetroCode string
		if o.MetroCode != nil {
			qrMetroCode = *o.MetroCode
		}
		qMetroCode := qrMetroCode
		if qMetroCode != "" {
			if err := r.SetQueryParam("metroCode", qMetroCode); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Total != nil {

		// query param total
		var qrTotal int32
		if o.Total != nil {
			qrTotal = *o.Total
		}
		qTotal := swag.FormatInt32(qrTotal)
		if qTotal != "" {
			if err := r.SetQueryParam("total", qTotal); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
