// Code generated by go-swagger; DO NOT EDIT.

package buyer_preferences

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new buyer preferences API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for buyer preferences API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteBuyerPreferenceUsingDELETE deletes buyer preference

This API allows an ECX Participant to delete the buyer preferences they have set with regard to their ECX services. Buyer preferences today are the email address to receive notifications from ECX and the port threshold percentage noting after what port utilization threshold the customer wishes to receive a notification – although others preferences may be added over time. For example, if the port threshold was set to 50%, the notification email address will receive an email message saying the threshold has been exceeded when utilization goes above 50%.
*/
func (a *Client) DeleteBuyerPreferenceUsingDELETE(params *DeleteBuyerPreferenceUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteBuyerPreferenceUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuyerPreferenceUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBuyerPreferenceUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/ecx/v3/l2/buyerPreference",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuyerPreferenceUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBuyerPreferenceUsingDELETENoContent), nil

}

/*
GetBuyerPreferenceUsingGET fetches buyer preference

This API allows an ECX Participant to retrieve the buyer preferences they have set with regard to their ECX services. Buyer preferences today are the email address to receive notifications from ECX and the port threshold percentage noting after what port utilization threshold the customer wishes to receive a notification – although others preferences may be added over time. For example, if the port thresholds were set to 50%, the notification email address will receive an email message saying the threshold has been exceeded when utilization goes above 50%.
*/
func (a *Client) GetBuyerPreferenceUsingGET(params *GetBuyerPreferenceUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuyerPreferenceUsingGETOK, *GetBuyerPreferenceUsingGETNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuyerPreferenceUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuyerPreferenceUsingGET",
		Method:             "GET",
		PathPattern:        "/ecx/v3/l2/buyerPreference",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuyerPreferenceUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetBuyerPreferenceUsingGETOK:
		return value, nil, nil
	case *GetBuyerPreferenceUsingGETNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
SaveBuyerPreferenceUsingPOST saves buyer preference

This API allows an ECX Participant to save the buyer preferences they have set using the PUT Buyer Preferences API with regard to their ECX services. Buyer preferences today are the email address to receive notifications from ECX and the port threshold percentage noting after what port utilization threshold the customer wishes to receive a notification – although others preferences may be added over time. For example, if the port thresholds were set to 50%, the notification email address will receive an email message saying the threshold has been exceeded when utilization goes above 50%.
*/
func (a *Client) SaveBuyerPreferenceUsingPOST(params *SaveBuyerPreferenceUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*SaveBuyerPreferenceUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveBuyerPreferenceUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "saveBuyerPreferenceUsingPOST",
		Method:             "POST",
		PathPattern:        "/ecx/v3/l2/buyerPreference",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SaveBuyerPreferenceUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SaveBuyerPreferenceUsingPOSTOK), nil

}

/*
UpdateBuyerPreferenceUsingPUT updates buyer preference

This API allows an ECX Participant to update or change the buyer preferences they have set with regard to their ECX services. Buyer preferences today are the email address to receive notifications from ECX and the port threshold percentage noting after what port utilization threshold the customer wishes to receive a notification – although others preferences may be added over time. For example, if the port thresholds were set to 50%, the notification email address will receive an email message saying the threshold has been exceeded when utilization goes above 50%.
*/
func (a *Client) UpdateBuyerPreferenceUsingPUT(params *UpdateBuyerPreferenceUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateBuyerPreferenceUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuyerPreferenceUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateBuyerPreferenceUsingPUT",
		Method:             "PUT",
		PathPattern:        "/ecx/v3/l2/buyerPreference",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuyerPreferenceUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateBuyerPreferenceUsingPUTOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
