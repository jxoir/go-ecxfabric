// Code generated by go-swagger; DO NOT EDIT.

package buyer_preferences

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jxoir/go-ecxfabric/models"
)

// GetBuyerPreferenceUsingGETReader is a Reader for the GetBuyerPreferenceUsingGET structure.
type GetBuyerPreferenceUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBuyerPreferenceUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetBuyerPreferenceUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewGetBuyerPreferenceUsingGETNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetBuyerPreferenceUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetBuyerPreferenceUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetBuyerPreferenceUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetBuyerPreferenceUsingGETOK creates a GetBuyerPreferenceUsingGETOK with default headers values
func NewGetBuyerPreferenceUsingGETOK() *GetBuyerPreferenceUsingGETOK {
	return &GetBuyerPreferenceUsingGETOK{}
}

/*GetBuyerPreferenceUsingGETOK handles this case with default header values.

Success
*/
type GetBuyerPreferenceUsingGETOK struct {
	Payload *models.BuyerPreferenceModel
}

func (o *GetBuyerPreferenceUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/buyerPreference][%d] getBuyerPreferenceUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetBuyerPreferenceUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BuyerPreferenceModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBuyerPreferenceUsingGETNoContent creates a GetBuyerPreferenceUsingGETNoContent with default headers values
func NewGetBuyerPreferenceUsingGETNoContent() *GetBuyerPreferenceUsingGETNoContent {
	return &GetBuyerPreferenceUsingGETNoContent{}
}

/*GetBuyerPreferenceUsingGETNoContent handles this case with default header values.

No Content
*/
type GetBuyerPreferenceUsingGETNoContent struct {
}

func (o *GetBuyerPreferenceUsingGETNoContent) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/buyerPreference][%d] getBuyerPreferenceUsingGETNoContent ", 204)
}

func (o *GetBuyerPreferenceUsingGETNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBuyerPreferenceUsingGETBadRequest creates a GetBuyerPreferenceUsingGETBadRequest with default headers values
func NewGetBuyerPreferenceUsingGETBadRequest() *GetBuyerPreferenceUsingGETBadRequest {
	return &GetBuyerPreferenceUsingGETBadRequest{}
}

/*GetBuyerPreferenceUsingGETBadRequest handles this case with default header values.

Bad Request
*/
type GetBuyerPreferenceUsingGETBadRequest struct {
	Payload models.ErrorResponseArray
}

func (o *GetBuyerPreferenceUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/buyerPreference][%d] getBuyerPreferenceUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetBuyerPreferenceUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBuyerPreferenceUsingGETNotFound creates a GetBuyerPreferenceUsingGETNotFound with default headers values
func NewGetBuyerPreferenceUsingGETNotFound() *GetBuyerPreferenceUsingGETNotFound {
	return &GetBuyerPreferenceUsingGETNotFound{}
}

/*GetBuyerPreferenceUsingGETNotFound handles this case with default header values.

Record Not Found
*/
type GetBuyerPreferenceUsingGETNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetBuyerPreferenceUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/buyerPreference][%d] getBuyerPreferenceUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetBuyerPreferenceUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBuyerPreferenceUsingGETInternalServerError creates a GetBuyerPreferenceUsingGETInternalServerError with default headers values
func NewGetBuyerPreferenceUsingGETInternalServerError() *GetBuyerPreferenceUsingGETInternalServerError {
	return &GetBuyerPreferenceUsingGETInternalServerError{}
}

/*GetBuyerPreferenceUsingGETInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetBuyerPreferenceUsingGETInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetBuyerPreferenceUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/buyerPreference][%d] getBuyerPreferenceUsingGETInternalServerError  %+v", 500, o.Payload)
}

func (o *GetBuyerPreferenceUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
