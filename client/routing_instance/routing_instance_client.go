// Code generated by go-swagger; DO NOT EDIT.

package routing_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new routing instance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for routing instance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateRoutingInstanceUsingPOST creates routing instance

This API is used to create Routing Instance
*/
func (a *Client) CreateRoutingInstanceUsingPOST(params *CreateRoutingInstanceUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRoutingInstanceUsingPOSTCreated, *CreateRoutingInstanceUsingPOSTNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRoutingInstanceUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRoutingInstanceUsingPOST",
		Method:             "POST",
		PathPattern:        "/ecx/v3/l3/routinginstance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRoutingInstanceUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRoutingInstanceUsingPOSTCreated:
		return value, nil, nil
	case *CreateRoutingInstanceUsingPOSTNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteRoutingInstanceUsingDELETE deletes routing instance

This API is used to delete Routing Instance for given uuid
*/
func (a *Client) DeleteRoutingInstanceUsingDELETE(params *DeleteRoutingInstanceUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRoutingInstanceUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoutingInstanceUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoutingInstanceUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/ecx/v3/l3/routinginstance/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutingInstanceUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoutingInstanceUsingDELETENoContent), nil

}

/*
GetAllRoutingInstancesUsingGET returns list of routing instances

This API is used to get all Routing Instances with respective to query params
*/
func (a *Client) GetAllRoutingInstancesUsingGET(params *GetAllRoutingInstancesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllRoutingInstancesUsingGETOK, *GetAllRoutingInstancesUsingGETNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllRoutingInstancesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllRoutingInstancesUsingGET",
		Method:             "GET",
		PathPattern:        "/ecx/v3/l3/routinginstance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllRoutingInstancesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAllRoutingInstancesUsingGETOK:
		return value, nil, nil
	case *GetAllRoutingInstancesUsingGETNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
IsRoutingInstanceExistUsingGET validates if routing instance name already exists or not

This API is used to check Routing Instance name exists or not
*/
func (a *Client) IsRoutingInstanceExistUsingGET(params *IsRoutingInstanceExistUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsRoutingInstanceExistUsingGETOK, *IsRoutingInstanceExistUsingGETNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsRoutingInstanceExistUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "isRoutingInstanceExistUsingGET",
		Method:             "GET",
		PathPattern:        "/ecx/v3/l3/routinginstance/exist/{metroCode}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IsRoutingInstanceExistUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *IsRoutingInstanceExistUsingGETOK:
		return value, nil, nil
	case *IsRoutingInstanceExistUsingGETNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
UpdateRoutingInstanceUsingPATCH updates routing instance

This API is used to update Routing Instance for given uuid.
*/
func (a *Client) UpdateRoutingInstanceUsingPATCH(params *UpdateRoutingInstanceUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRoutingInstanceUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRoutingInstanceUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRoutingInstanceUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/ecx/v3/l3/routinginstance/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRoutingInstanceUsingPATCHReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateRoutingInstanceUsingPATCHNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
