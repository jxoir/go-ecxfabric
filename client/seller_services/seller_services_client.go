// Code generated by go-swagger; DO NOT EDIT.

package seller_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new seller services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for seller services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetProfileByIDUsingGET fetches service profile based on uuid

Return a list of all service profiles for a given uuid/customer.
*/
func (a *Client) GetProfileByIDUsingGET(params *GetProfileByIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProfileByIDUsingGETOK, *GetProfileByIDUsingGETNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProfileByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProfileByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/ecx/v3/l2/serviceprofiles/services/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProfileByIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetProfileByIDUsingGETOK:
		return value, nil, nil
	case *GetProfileByIDUsingGETNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetProfilesByMetroUsingGET fetches all service profiles

Return a list of all service profiles.
*/
func (a *Client) GetProfilesByMetroUsingGET(params *GetProfilesByMetroUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProfilesByMetroUsingGETOK, *GetProfilesByMetroUsingGETNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProfilesByMetroUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProfilesByMetroUsingGET",
		Method:             "GET",
		PathPattern:        "/ecx/v3/l2/serviceprofiles/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProfilesByMetroUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetProfilesByMetroUsingGETOK:
		return value, nil, nil
	case *GetProfilesByMetroUsingGETNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetSellerServicesUsingGET fetches all seller profile for given metros

This API returns list of seller profiles.
*/
func (a *Client) GetSellerServicesUsingGET(params *GetSellerServicesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSellerServicesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSellerServicesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSellerServicesUsingGET",
		Method:             "GET",
		PathPattern:        "/ecx/v3/l3/serviceprofiles/service",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSellerServicesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSellerServicesUsingGETOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
