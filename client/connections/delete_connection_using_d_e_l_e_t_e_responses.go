// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jxoir/go-ecxfabric/models"
)

// DeleteConnectionUsingDELETEReader is a Reader for the DeleteConnectionUsingDELETE structure.
type DeleteConnectionUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteConnectionUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteConnectionUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteConnectionUsingDELETEBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteConnectionUsingDELETEOK creates a DeleteConnectionUsingDELETEOK with default headers values
func NewDeleteConnectionUsingDELETEOK() *DeleteConnectionUsingDELETEOK {
	return &DeleteConnectionUsingDELETEOK{}
}

/*DeleteConnectionUsingDELETEOK handles this case with default header values.

Success
*/
type DeleteConnectionUsingDELETEOK struct {
	Payload *models.DeleteConnectionResponse
}

func (o *DeleteConnectionUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /ecx/v3/l2/connections/{connId}][%d] deleteConnectionUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *DeleteConnectionUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteConnectionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConnectionUsingDELETEBadRequest creates a DeleteConnectionUsingDELETEBadRequest with default headers values
func NewDeleteConnectionUsingDELETEBadRequest() *DeleteConnectionUsingDELETEBadRequest {
	return &DeleteConnectionUsingDELETEBadRequest{}
}

/*DeleteConnectionUsingDELETEBadRequest handles this case with default header values.

Bad Request
*/
type DeleteConnectionUsingDELETEBadRequest struct {
	Payload models.ErrorResponseArray
}

func (o *DeleteConnectionUsingDELETEBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /ecx/v3/l2/connections/{connId}][%d] deleteConnectionUsingDELETEBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteConnectionUsingDELETEBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
