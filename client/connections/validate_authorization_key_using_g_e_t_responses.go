// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jxoir/go-ecxfabric/models"
)

// ValidateAuthorizationKeyUsingGETReader is a Reader for the ValidateAuthorizationKeyUsingGET structure.
type ValidateAuthorizationKeyUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateAuthorizationKeyUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewValidateAuthorizationKeyUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewValidateAuthorizationKeyUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewValidateAuthorizationKeyUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewValidateAuthorizationKeyUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewValidateAuthorizationKeyUsingGETOK creates a ValidateAuthorizationKeyUsingGETOK with default headers values
func NewValidateAuthorizationKeyUsingGETOK() *ValidateAuthorizationKeyUsingGETOK {
	return &ValidateAuthorizationKeyUsingGETOK{}
}

/*ValidateAuthorizationKeyUsingGETOK handles this case with default header values.

Success
*/
type ValidateAuthorizationKeyUsingGETOK struct {
	Payload *models.GetValidateAuthKeyRes
}

func (o *ValidateAuthorizationKeyUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/connections/validateAuthorizationKey][%d] validateAuthorizationKeyUsingGETOK  %+v", 200, o.Payload)
}

func (o *ValidateAuthorizationKeyUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetValidateAuthKeyRes)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateAuthorizationKeyUsingGETBadRequest creates a ValidateAuthorizationKeyUsingGETBadRequest with default headers values
func NewValidateAuthorizationKeyUsingGETBadRequest() *ValidateAuthorizationKeyUsingGETBadRequest {
	return &ValidateAuthorizationKeyUsingGETBadRequest{}
}

/*ValidateAuthorizationKeyUsingGETBadRequest handles this case with default header values.

Bad Request
*/
type ValidateAuthorizationKeyUsingGETBadRequest struct {
	Payload models.ErrorResponseArray
}

func (o *ValidateAuthorizationKeyUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/connections/validateAuthorizationKey][%d] validateAuthorizationKeyUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateAuthorizationKeyUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateAuthorizationKeyUsingGETNotFound creates a ValidateAuthorizationKeyUsingGETNotFound with default headers values
func NewValidateAuthorizationKeyUsingGETNotFound() *ValidateAuthorizationKeyUsingGETNotFound {
	return &ValidateAuthorizationKeyUsingGETNotFound{}
}

/*ValidateAuthorizationKeyUsingGETNotFound handles this case with default header values.

Not Found
*/
type ValidateAuthorizationKeyUsingGETNotFound struct {
	Payload *models.ErrorResponse
}

func (o *ValidateAuthorizationKeyUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/connections/validateAuthorizationKey][%d] validateAuthorizationKeyUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *ValidateAuthorizationKeyUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateAuthorizationKeyUsingGETInternalServerError creates a ValidateAuthorizationKeyUsingGETInternalServerError with default headers values
func NewValidateAuthorizationKeyUsingGETInternalServerError() *ValidateAuthorizationKeyUsingGETInternalServerError {
	return &ValidateAuthorizationKeyUsingGETInternalServerError{}
}

/*ValidateAuthorizationKeyUsingGETInternalServerError handles this case with default header values.

Internal Server Error
*/
type ValidateAuthorizationKeyUsingGETInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ValidateAuthorizationKeyUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/connections/validateAuthorizationKey][%d] validateAuthorizationKeyUsingGETInternalServerError  %+v", 500, o.Payload)
}

func (o *ValidateAuthorizationKeyUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
