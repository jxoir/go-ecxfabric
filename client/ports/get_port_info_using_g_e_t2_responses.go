// Code generated by go-swagger; DO NOT EDIT.

package ports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jxoir/go-ecxfabric/models"
)

// GetPortInfoUsingGET2Reader is a Reader for the GetPortInfoUsingGET2 structure.
type GetPortInfoUsingGET2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPortInfoUsingGET2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPortInfoUsingGET2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetPortInfoUsingGET2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetPortInfoUsingGET2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetPortInfoUsingGET2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPortInfoUsingGET2OK creates a GetPortInfoUsingGET2OK with default headers values
func NewGetPortInfoUsingGET2OK() *GetPortInfoUsingGET2OK {
	return &GetPortInfoUsingGET2OK{}
}

/*GetPortInfoUsingGET2OK handles this case with default header values.

Successfully retrieved list
*/
type GetPortInfoUsingGET2OK struct {
	Payload []*models.UserPortResObj
}

func (o *GetPortInfoUsingGET2OK) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/port/userport][%d] getPortInfoUsingGET2OK  %+v", 200, o.Payload)
}

func (o *GetPortInfoUsingGET2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPortInfoUsingGET2Unauthorized creates a GetPortInfoUsingGET2Unauthorized with default headers values
func NewGetPortInfoUsingGET2Unauthorized() *GetPortInfoUsingGET2Unauthorized {
	return &GetPortInfoUsingGET2Unauthorized{}
}

/*GetPortInfoUsingGET2Unauthorized handles this case with default header values.

You are not authorized to view the resource
*/
type GetPortInfoUsingGET2Unauthorized struct {
}

func (o *GetPortInfoUsingGET2Unauthorized) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/port/userport][%d] getPortInfoUsingGET2Unauthorized ", 401)
}

func (o *GetPortInfoUsingGET2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPortInfoUsingGET2Forbidden creates a GetPortInfoUsingGET2Forbidden with default headers values
func NewGetPortInfoUsingGET2Forbidden() *GetPortInfoUsingGET2Forbidden {
	return &GetPortInfoUsingGET2Forbidden{}
}

/*GetPortInfoUsingGET2Forbidden handles this case with default header values.

Accessing the resource you were trying to reach is forbidden
*/
type GetPortInfoUsingGET2Forbidden struct {
}

func (o *GetPortInfoUsingGET2Forbidden) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/port/userport][%d] getPortInfoUsingGET2Forbidden ", 403)
}

func (o *GetPortInfoUsingGET2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPortInfoUsingGET2NotFound creates a GetPortInfoUsingGET2NotFound with default headers values
func NewGetPortInfoUsingGET2NotFound() *GetPortInfoUsingGET2NotFound {
	return &GetPortInfoUsingGET2NotFound{}
}

/*GetPortInfoUsingGET2NotFound handles this case with default header values.

The resource you were trying to reach is not found
*/
type GetPortInfoUsingGET2NotFound struct {
}

func (o *GetPortInfoUsingGET2NotFound) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/port/userport][%d] getPortInfoUsingGET2NotFound ", 404)
}

func (o *GetPortInfoUsingGET2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
