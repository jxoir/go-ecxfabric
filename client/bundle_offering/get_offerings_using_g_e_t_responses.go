// Code generated by go-swagger; DO NOT EDIT.

package bundle_offering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jxoir/go-ecxfabric/models"
)

// GetOfferingsUsingGETReader is a Reader for the GetOfferingsUsingGET structure.
type GetOfferingsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOfferingsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetOfferingsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetOfferingsUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetOfferingsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetOfferingsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetOfferingsUsingGETMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewGetOfferingsUsingGETConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetOfferingsUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetOfferingsUsingGETServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetOfferingsUsingGETOK creates a GetOfferingsUsingGETOK with default headers values
func NewGetOfferingsUsingGETOK() *GetOfferingsUsingGETOK {
	return &GetOfferingsUsingGETOK{}
}

/*GetOfferingsUsingGETOK handles this case with default header values.

success
*/
type GetOfferingsUsingGETOK struct {
	Payload *models.Offering
}

func (o *GetOfferingsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/bundle][%d] getOfferingsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetOfferingsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Offering)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOfferingsUsingGETBadRequest creates a GetOfferingsUsingGETBadRequest with default headers values
func NewGetOfferingsUsingGETBadRequest() *GetOfferingsUsingGETBadRequest {
	return &GetOfferingsUsingGETBadRequest{}
}

/*GetOfferingsUsingGETBadRequest handles this case with default header values.

Bad request
*/
type GetOfferingsUsingGETBadRequest struct {
	Payload models.GeneralErrorMessage
}

func (o *GetOfferingsUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/bundle][%d] getOfferingsUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetOfferingsUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOfferingsUsingGETUnauthorized creates a GetOfferingsUsingGETUnauthorized with default headers values
func NewGetOfferingsUsingGETUnauthorized() *GetOfferingsUsingGETUnauthorized {
	return &GetOfferingsUsingGETUnauthorized{}
}

/*GetOfferingsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetOfferingsUsingGETUnauthorized struct {
	Payload models.GeneralErrorMessage
}

func (o *GetOfferingsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/bundle][%d] getOfferingsUsingGETUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOfferingsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOfferingsUsingGETForbidden creates a GetOfferingsUsingGETForbidden with default headers values
func NewGetOfferingsUsingGETForbidden() *GetOfferingsUsingGETForbidden {
	return &GetOfferingsUsingGETForbidden{}
}

/*GetOfferingsUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetOfferingsUsingGETForbidden struct {
	Payload models.GeneralErrorMessage
}

func (o *GetOfferingsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/bundle][%d] getOfferingsUsingGETForbidden  %+v", 403, o.Payload)
}

func (o *GetOfferingsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOfferingsUsingGETMethodNotAllowed creates a GetOfferingsUsingGETMethodNotAllowed with default headers values
func NewGetOfferingsUsingGETMethodNotAllowed() *GetOfferingsUsingGETMethodNotAllowed {
	return &GetOfferingsUsingGETMethodNotAllowed{}
}

/*GetOfferingsUsingGETMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type GetOfferingsUsingGETMethodNotAllowed struct {
	Payload models.GeneralErrorMessage
}

func (o *GetOfferingsUsingGETMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/bundle][%d] getOfferingsUsingGETMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetOfferingsUsingGETMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOfferingsUsingGETConflict creates a GetOfferingsUsingGETConflict with default headers values
func NewGetOfferingsUsingGETConflict() *GetOfferingsUsingGETConflict {
	return &GetOfferingsUsingGETConflict{}
}

/*GetOfferingsUsingGETConflict handles this case with default header values.

Conflict
*/
type GetOfferingsUsingGETConflict struct {
	Payload models.GeneralErrorMessage
}

func (o *GetOfferingsUsingGETConflict) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/bundle][%d] getOfferingsUsingGETConflict  %+v", 409, o.Payload)
}

func (o *GetOfferingsUsingGETConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOfferingsUsingGETInternalServerError creates a GetOfferingsUsingGETInternalServerError with default headers values
func NewGetOfferingsUsingGETInternalServerError() *GetOfferingsUsingGETInternalServerError {
	return &GetOfferingsUsingGETInternalServerError{}
}

/*GetOfferingsUsingGETInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetOfferingsUsingGETInternalServerError struct {
	Payload models.GeneralErrorMessage
}

func (o *GetOfferingsUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/bundle][%d] getOfferingsUsingGETInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOfferingsUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOfferingsUsingGETServiceUnavailable creates a GetOfferingsUsingGETServiceUnavailable with default headers values
func NewGetOfferingsUsingGETServiceUnavailable() *GetOfferingsUsingGETServiceUnavailable {
	return &GetOfferingsUsingGETServiceUnavailable{}
}

/*GetOfferingsUsingGETServiceUnavailable handles this case with default header values.

Service Unavailable
*/
type GetOfferingsUsingGETServiceUnavailable struct {
	Payload models.GeneralErrorMessage
}

func (o *GetOfferingsUsingGETServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/bundle][%d] getOfferingsUsingGETServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOfferingsUsingGETServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
