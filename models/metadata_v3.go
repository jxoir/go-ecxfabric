// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MetadataV3 metadata v3
// swagger:model metadataV3
type MetadataV3 struct {

	// integration id
	IntegrationID string `json:"integration_id,omitempty"`

	// named tag
	NamedTag string `json:"named_tag,omitempty"`

	// notification emails
	NotificationEmails NotificationEmailsv3 `json:"notification_emails"`
}

// Validate validates this metadata v3
func (m *MetadataV3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotificationEmails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetadataV3) validateNotificationEmails(formats strfmt.Registry) error {

	if swag.IsZero(m.NotificationEmails) { // not required
		return nil
	}

	if err := m.NotificationEmails.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("notification_emails")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetadataV3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetadataV3) UnmarshalBinary(b []byte) error {
	var res MetadataV3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
