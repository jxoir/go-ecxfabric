// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SubscriptionDetails subscription details
// swagger:model SubscriptionDetails
type SubscriptionDetails struct {

	// authorization key
	AuthorizationKey string `json:"authorizationKey,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// created by email
	CreatedByEmail string `json:"createdByEmail,omitempty"`

	// created by full name
	CreatedByFullName string `json:"createdByFullName,omitempty"`

	// created date
	CreatedDate string `json:"createdDate,omitempty"`

	// last updated by
	LastUpdatedBy string `json:"lastUpdatedBy,omitempty"`

	// last updated by email
	LastUpdatedByEmail string `json:"lastUpdatedByEmail,omitempty"`

	// last updated by full name
	LastUpdatedByFullName string `json:"lastUpdatedByFullName,omitempty"`

	// last updated date
	LastUpdatedDate string `json:"lastUpdatedDate,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// notification emails
	NotificationEmails []string `json:"notificationEmails"`

	// optional network service
	OptionalNetworkService *SubscriptionDetailsOptionalNetworkService `json:"optionalNetworkService,omitempty"`

	// service profile metro code
	ServiceProfileMetroCode string `json:"serviceProfileMetroCode,omitempty"`

	// service profile name
	ServiceProfileName string `json:"serviceProfileName,omitempty"`

	// service profile Uuid
	ServiceProfileUUID string `json:"serviceProfileUuid,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// subscriber metro code
	SubscriberMetroCode string `json:"subscriberMetroCode,omitempty"`

	// subscriber ri name
	SubscriberRiName string `json:"subscriberRiName,omitempty"`

	// subscriber ri Uuid
	SubscriberRiUUID string `json:"subscriberRiUuid,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this subscription details
func (m *SubscriptionDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptionalNetworkService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionDetails) validateOptionalNetworkService(formats strfmt.Registry) error {

	if swag.IsZero(m.OptionalNetworkService) { // not required
		return nil
	}

	if m.OptionalNetworkService != nil {
		if err := m.OptionalNetworkService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optionalNetworkService")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionDetails) UnmarshalBinary(b []byte) error {
	var res SubscriptionDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SubscriptionDetailsOptionalNetworkService subscription details optional network service
// swagger:model SubscriptionDetailsOptionalNetworkService
type SubscriptionDetailsOptionalNetworkService struct {

	// dedicated connector name
	DedicatedConnectorName string `json:"dedicatedConnectorName,omitempty"`

	// dedicated connector Uuid
	DedicatedConnectorUUID string `json:"dedicatedConnectorUuid,omitempty"`

	// equinix enforced nat
	EquinixEnforcedNat bool `json:"equinixEnforcedNat,omitempty"`

	// nat address
	NatAddress []string `json:"natAddress"`

	// perform nat
	PerformNat bool `json:"performNat,omitempty"`

	// policer
	Policer *SubscriptionDetailsOptionalNetworkServicePolicer `json:"policer,omitempty"`
}

// Validate validates this subscription details optional network service
func (m *SubscriptionDetailsOptionalNetworkService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionDetailsOptionalNetworkService) validatePolicer(formats strfmt.Registry) error {

	if swag.IsZero(m.Policer) { // not required
		return nil
	}

	if m.Policer != nil {
		if err := m.Policer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optionalNetworkService" + "." + "policer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionDetailsOptionalNetworkService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionDetailsOptionalNetworkService) UnmarshalBinary(b []byte) error {
	var res SubscriptionDetailsOptionalNetworkService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SubscriptionDetailsOptionalNetworkServicePolicer subscription details optional network service policer
// swagger:model SubscriptionDetailsOptionalNetworkServicePolicer
type SubscriptionDetailsOptionalNetworkServicePolicer struct {

	// speed
	Speed int64 `json:"speed,omitempty"`

	// unit
	Unit string `json:"unit,omitempty"`
}

// Validate validates this subscription details optional network service policer
func (m *SubscriptionDetailsOptionalNetworkServicePolicer) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionDetailsOptionalNetworkServicePolicer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionDetailsOptionalNetworkServicePolicer) UnmarshalBinary(b []byte) error {
	var res SubscriptionDetailsOptionalNetworkServicePolicer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
