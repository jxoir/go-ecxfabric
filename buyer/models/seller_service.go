// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SellerService seller service
// swagger:model SellerService
type SellerService struct {

	// allow custom speed
	AllowCustomSpeed bool `json:"allowCustomSpeed,omitempty"`

	// auth key label
	AuthKeyLabel string `json:"authKeyLabel,omitempty"`

	// bgp community tag Url
	BgpCommunityTagURL string `json:"bgpCommunityTagUrl,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// enabled features
	EnabledFeatures *EnabledFeaturesModel `json:"enabledFeatures,omitempty"`

	// filter incoming routes
	FilterIncomingRoutes bool `json:"filterIncomingRoutes,omitempty"`

	// metros
	Metros []*SellerServiceMetro `json:"metros"`

	// name
	Name string `json:"name,omitempty"`

	// speed bands
	SpeedBands []*SpeedBand `json:"speedBands"`

	// uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this seller service
func (m *SellerService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabledFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetros(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeedBands(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SellerService) validateEnabledFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.EnabledFeatures) { // not required
		return nil
	}

	if m.EnabledFeatures != nil {
		if err := m.EnabledFeatures.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enabledFeatures")
			}
			return err
		}
	}

	return nil
}

func (m *SellerService) validateMetros(formats strfmt.Registry) error {

	if swag.IsZero(m.Metros) { // not required
		return nil
	}

	for i := 0; i < len(m.Metros); i++ {
		if swag.IsZero(m.Metros[i]) { // not required
			continue
		}

		if m.Metros[i] != nil {
			if err := m.Metros[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metros" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SellerService) validateSpeedBands(formats strfmt.Registry) error {

	if swag.IsZero(m.SpeedBands) { // not required
		return nil
	}

	for i := 0; i < len(m.SpeedBands); i++ {
		if swag.IsZero(m.SpeedBands[i]) { // not required
			continue
		}

		if m.SpeedBands[i] != nil {
			if err := m.SpeedBands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("speedBands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SellerService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SellerService) UnmarshalBinary(b []byte) error {
	var res SellerService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
