// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RoutingInstancev3 routing instancev3
// swagger:model RoutingInstancev3
type RoutingInstancev3 struct {

	// asn
	Asn int64 `json:"asn,omitempty"`

	// bgp authorization key
	BgpAuthorizationKey string `json:"bgpAuthorizationKey,omitempty"`

	// connectors
	Connectors []*RiConnector `json:"connectors"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// created by email
	CreatedByEmail string `json:"createdByEmail,omitempty"`

	// created by full name
	CreatedByFullName string `json:"createdByFullName,omitempty"`

	// created date
	CreatedDate string `json:"createdDate,omitempty"`

	// equinix asn
	EquinixAsn int64 `json:"equinixAsn,omitempty"`

	// incoming subscriptions
	IncomingSubscriptions []*IncomingSubscription `json:"incomingSubscriptions"`

	// last updated by
	LastUpdatedBy string `json:"lastUpdatedBy,omitempty"`

	// last updated by email
	LastUpdatedByEmail string `json:"lastUpdatedByEmail,omitempty"`

	// last updated by full name
	LastUpdatedByFullName string `json:"lastUpdatedByFullName,omitempty"`

	// last updated date
	LastUpdatedDate string `json:"lastUpdatedDate,omitempty"`

	// metro code
	MetroCode string `json:"metroCode,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// notification emails
	NotificationEmails []string `json:"notificationEmails"`

	// optional network service
	OptionalNetworkService *RIOptionalNetwork `json:"optionalNetworkService,omitempty"`

	// outgoing subscriptions
	OutgoingSubscriptions []*OutGoingSubscription `json:"outgoingSubscriptions"`

	// route type
	RouteType string `json:"routeType,omitempty"`

	// service profiles
	ServiceProfiles []*RiServiceProfile `json:"serviceProfiles"`

	// state
	State string `json:"state,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this routing instancev3
func (m *RoutingInstancev3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncomingSubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionalNetworkService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutgoingSubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceProfiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoutingInstancev3) validateConnectors(formats strfmt.Registry) error {

	if swag.IsZero(m.Connectors) { // not required
		return nil
	}

	for i := 0; i < len(m.Connectors); i++ {
		if swag.IsZero(m.Connectors[i]) { // not required
			continue
		}

		if m.Connectors[i] != nil {
			if err := m.Connectors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RoutingInstancev3) validateIncomingSubscriptions(formats strfmt.Registry) error {

	if swag.IsZero(m.IncomingSubscriptions) { // not required
		return nil
	}

	for i := 0; i < len(m.IncomingSubscriptions); i++ {
		if swag.IsZero(m.IncomingSubscriptions[i]) { // not required
			continue
		}

		if m.IncomingSubscriptions[i] != nil {
			if err := m.IncomingSubscriptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incomingSubscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RoutingInstancev3) validateOptionalNetworkService(formats strfmt.Registry) error {

	if swag.IsZero(m.OptionalNetworkService) { // not required
		return nil
	}

	if m.OptionalNetworkService != nil {
		if err := m.OptionalNetworkService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optionalNetworkService")
			}
			return err
		}
	}

	return nil
}

func (m *RoutingInstancev3) validateOutgoingSubscriptions(formats strfmt.Registry) error {

	if swag.IsZero(m.OutgoingSubscriptions) { // not required
		return nil
	}

	for i := 0; i < len(m.OutgoingSubscriptions); i++ {
		if swag.IsZero(m.OutgoingSubscriptions[i]) { // not required
			continue
		}

		if m.OutgoingSubscriptions[i] != nil {
			if err := m.OutgoingSubscriptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outgoingSubscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RoutingInstancev3) validateServiceProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceProfiles) { // not required
		return nil
	}

	for i := 0; i < len(m.ServiceProfiles); i++ {
		if swag.IsZero(m.ServiceProfiles[i]) { // not required
			continue
		}

		if m.ServiceProfiles[i] != nil {
			if err := m.ServiceProfiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceProfiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoutingInstancev3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoutingInstancev3) UnmarshalBinary(b []byte) error {
	var res RoutingInstancev3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
