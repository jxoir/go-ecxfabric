// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GUIDEDOrderRequest guided order request
// swagger:model GuidedOrderRequest
type GUIDEDOrderRequest struct {

	// connector
	Connector *ConnectorBundleOrdering `json:"connector,omitempty"`

	// routing instance
	RoutingInstance *RoutingInstanceBundleOrdering `json:"routingInstance,omitempty"`

	// subscription
	Subscription *SubscriptionBundleOrdering `json:"subscription,omitempty"`
}

// Validate validates this guided order request
func (m *GUIDEDOrderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GUIDEDOrderRequest) validateConnector(formats strfmt.Registry) error {

	if swag.IsZero(m.Connector) { // not required
		return nil
	}

	if m.Connector != nil {
		if err := m.Connector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connector")
			}
			return err
		}
	}

	return nil
}

func (m *GUIDEDOrderRequest) validateRoutingInstance(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutingInstance) { // not required
		return nil
	}

	if m.RoutingInstance != nil {
		if err := m.RoutingInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routingInstance")
			}
			return err
		}
	}

	return nil
}

func (m *GUIDEDOrderRequest) validateSubscription(formats strfmt.Registry) error {

	if swag.IsZero(m.Subscription) { // not required
		return nil
	}

	if m.Subscription != nil {
		if err := m.Subscription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscription")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GUIDEDOrderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GUIDEDOrderRequest) UnmarshalBinary(b []byte) error {
	var res GUIDEDOrderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
