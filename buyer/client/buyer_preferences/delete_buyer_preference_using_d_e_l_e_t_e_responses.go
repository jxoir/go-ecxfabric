// Code generated by go-swagger; DO NOT EDIT.

package buyer_preferences

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jxoir/go-ecxfabric/buyer/models"
)

// DeleteBuyerPreferenceUsingDELETEReader is a Reader for the DeleteBuyerPreferenceUsingDELETE structure.
type DeleteBuyerPreferenceUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteBuyerPreferenceUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteBuyerPreferenceUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewDeleteBuyerPreferenceUsingDELETENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteBuyerPreferenceUsingDELETEInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteBuyerPreferenceUsingDELETENoContent creates a DeleteBuyerPreferenceUsingDELETENoContent with default headers values
func NewDeleteBuyerPreferenceUsingDELETENoContent() *DeleteBuyerPreferenceUsingDELETENoContent {
	return &DeleteBuyerPreferenceUsingDELETENoContent{}
}

/*DeleteBuyerPreferenceUsingDELETENoContent handles this case with default header values.

No content
*/
type DeleteBuyerPreferenceUsingDELETENoContent struct {
}

func (o *DeleteBuyerPreferenceUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /ecx/v3/l2/buyerPreference][%d] deleteBuyerPreferenceUsingDELETENoContent ", 204)
}

func (o *DeleteBuyerPreferenceUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteBuyerPreferenceUsingDELETENotFound creates a DeleteBuyerPreferenceUsingDELETENotFound with default headers values
func NewDeleteBuyerPreferenceUsingDELETENotFound() *DeleteBuyerPreferenceUsingDELETENotFound {
	return &DeleteBuyerPreferenceUsingDELETENotFound{}
}

/*DeleteBuyerPreferenceUsingDELETENotFound handles this case with default header values.

Record Not Found
*/
type DeleteBuyerPreferenceUsingDELETENotFound struct {
	Payload *models.ErrorResponse
}

func (o *DeleteBuyerPreferenceUsingDELETENotFound) Error() string {
	return fmt.Sprintf("[DELETE /ecx/v3/l2/buyerPreference][%d] deleteBuyerPreferenceUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *DeleteBuyerPreferenceUsingDELETENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBuyerPreferenceUsingDELETEInternalServerError creates a DeleteBuyerPreferenceUsingDELETEInternalServerError with default headers values
func NewDeleteBuyerPreferenceUsingDELETEInternalServerError() *DeleteBuyerPreferenceUsingDELETEInternalServerError {
	return &DeleteBuyerPreferenceUsingDELETEInternalServerError{}
}

/*DeleteBuyerPreferenceUsingDELETEInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteBuyerPreferenceUsingDELETEInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *DeleteBuyerPreferenceUsingDELETEInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /ecx/v3/l2/buyerPreference][%d] deleteBuyerPreferenceUsingDELETEInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteBuyerPreferenceUsingDELETEInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
