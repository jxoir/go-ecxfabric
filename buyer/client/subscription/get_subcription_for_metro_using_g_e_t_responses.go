// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jxoir/go-ecxfabric/buyer/models"
)

// GetSubcriptionForMetroUsingGETReader is a Reader for the GetSubcriptionForMetroUsingGET structure.
type GetSubcriptionForMetroUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSubcriptionForMetroUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSubcriptionForMetroUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSubcriptionForMetroUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetSubcriptionForMetroUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetSubcriptionForMetroUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetSubcriptionForMetroUsingGETMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewGetSubcriptionForMetroUsingGETConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetSubcriptionForMetroUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetSubcriptionForMetroUsingGETServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSubcriptionForMetroUsingGETOK creates a GetSubcriptionForMetroUsingGETOK with default headers values
func NewGetSubcriptionForMetroUsingGETOK() *GetSubcriptionForMetroUsingGETOK {
	return &GetSubcriptionForMetroUsingGETOK{}
}

/*GetSubcriptionForMetroUsingGETOK handles this case with default header values.

OK
*/
type GetSubcriptionForMetroUsingGETOK struct {
	Payload *models.SubscriptionExistResponseModel
}

func (o *GetSubcriptionForMetroUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/subscription/exist/{metroCode}/{subcriptionName}][%d] getSubcriptionForMetroUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetSubcriptionForMetroUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SubscriptionExistResponseModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubcriptionForMetroUsingGETBadRequest creates a GetSubcriptionForMetroUsingGETBadRequest with default headers values
func NewGetSubcriptionForMetroUsingGETBadRequest() *GetSubcriptionForMetroUsingGETBadRequest {
	return &GetSubcriptionForMetroUsingGETBadRequest{}
}

/*GetSubcriptionForMetroUsingGETBadRequest handles this case with default header values.

Bad request
*/
type GetSubcriptionForMetroUsingGETBadRequest struct {
	Payload models.GeneralErrorMessage
}

func (o *GetSubcriptionForMetroUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/subscription/exist/{metroCode}/{subcriptionName}][%d] getSubcriptionForMetroUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetSubcriptionForMetroUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubcriptionForMetroUsingGETUnauthorized creates a GetSubcriptionForMetroUsingGETUnauthorized with default headers values
func NewGetSubcriptionForMetroUsingGETUnauthorized() *GetSubcriptionForMetroUsingGETUnauthorized {
	return &GetSubcriptionForMetroUsingGETUnauthorized{}
}

/*GetSubcriptionForMetroUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetSubcriptionForMetroUsingGETUnauthorized struct {
	Payload models.GeneralErrorMessage
}

func (o *GetSubcriptionForMetroUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/subscription/exist/{metroCode}/{subcriptionName}][%d] getSubcriptionForMetroUsingGETUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSubcriptionForMetroUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubcriptionForMetroUsingGETForbidden creates a GetSubcriptionForMetroUsingGETForbidden with default headers values
func NewGetSubcriptionForMetroUsingGETForbidden() *GetSubcriptionForMetroUsingGETForbidden {
	return &GetSubcriptionForMetroUsingGETForbidden{}
}

/*GetSubcriptionForMetroUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetSubcriptionForMetroUsingGETForbidden struct {
	Payload models.GeneralErrorMessage
}

func (o *GetSubcriptionForMetroUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/subscription/exist/{metroCode}/{subcriptionName}][%d] getSubcriptionForMetroUsingGETForbidden  %+v", 403, o.Payload)
}

func (o *GetSubcriptionForMetroUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubcriptionForMetroUsingGETMethodNotAllowed creates a GetSubcriptionForMetroUsingGETMethodNotAllowed with default headers values
func NewGetSubcriptionForMetroUsingGETMethodNotAllowed() *GetSubcriptionForMetroUsingGETMethodNotAllowed {
	return &GetSubcriptionForMetroUsingGETMethodNotAllowed{}
}

/*GetSubcriptionForMetroUsingGETMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type GetSubcriptionForMetroUsingGETMethodNotAllowed struct {
	Payload models.GeneralErrorMessage
}

func (o *GetSubcriptionForMetroUsingGETMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/subscription/exist/{metroCode}/{subcriptionName}][%d] getSubcriptionForMetroUsingGETMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetSubcriptionForMetroUsingGETMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubcriptionForMetroUsingGETConflict creates a GetSubcriptionForMetroUsingGETConflict with default headers values
func NewGetSubcriptionForMetroUsingGETConflict() *GetSubcriptionForMetroUsingGETConflict {
	return &GetSubcriptionForMetroUsingGETConflict{}
}

/*GetSubcriptionForMetroUsingGETConflict handles this case with default header values.

Conflict
*/
type GetSubcriptionForMetroUsingGETConflict struct {
	Payload models.GeneralErrorMessage
}

func (o *GetSubcriptionForMetroUsingGETConflict) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/subscription/exist/{metroCode}/{subcriptionName}][%d] getSubcriptionForMetroUsingGETConflict  %+v", 409, o.Payload)
}

func (o *GetSubcriptionForMetroUsingGETConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubcriptionForMetroUsingGETInternalServerError creates a GetSubcriptionForMetroUsingGETInternalServerError with default headers values
func NewGetSubcriptionForMetroUsingGETInternalServerError() *GetSubcriptionForMetroUsingGETInternalServerError {
	return &GetSubcriptionForMetroUsingGETInternalServerError{}
}

/*GetSubcriptionForMetroUsingGETInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetSubcriptionForMetroUsingGETInternalServerError struct {
	Payload models.GeneralErrorMessage
}

func (o *GetSubcriptionForMetroUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/subscription/exist/{metroCode}/{subcriptionName}][%d] getSubcriptionForMetroUsingGETInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSubcriptionForMetroUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubcriptionForMetroUsingGETServiceUnavailable creates a GetSubcriptionForMetroUsingGETServiceUnavailable with default headers values
func NewGetSubcriptionForMetroUsingGETServiceUnavailable() *GetSubcriptionForMetroUsingGETServiceUnavailable {
	return &GetSubcriptionForMetroUsingGETServiceUnavailable{}
}

/*GetSubcriptionForMetroUsingGETServiceUnavailable handles this case with default header values.

Service Unavailable
*/
type GetSubcriptionForMetroUsingGETServiceUnavailable struct {
	Payload models.GeneralErrorMessage
}

func (o *GetSubcriptionForMetroUsingGETServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/subscription/exist/{metroCode}/{subcriptionName}][%d] getSubcriptionForMetroUsingGETServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSubcriptionForMetroUsingGETServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
