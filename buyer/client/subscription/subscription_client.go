// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new subscription API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subscription API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateUsingPOST creates subcription

This API is used to Create subcription.
*/
func (a *Client) CreateUsingPOST(params *CreateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUsingPOST",
		Method:             "POST",
		PathPattern:        "/ecx/v3/l3/subscription",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUsingPOSTCreated), nil

}

/*
DeleteByIDUsingDELETE deletes subscription for given uuid

This API is used to delete subscription for given uuid.
*/
func (a *Client) DeleteByIDUsingDELETE(params *DeleteByIDUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteByIDUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByIDUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteByIdUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/ecx/v3/l3/subscription/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteByIDUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteByIDUsingDELETENoContent), nil

}

/*
GetAllSubcriptionsUsingGET returns all subscriptions

API returns list of subcription details with respective to query params
*/
func (a *Client) GetAllSubcriptionsUsingGET(params *GetAllSubcriptionsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllSubcriptionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSubcriptionsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllSubcriptionsUsingGET",
		Method:             "GET",
		PathPattern:        "/ecx/v3/l3/subscription",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllSubcriptionsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllSubcriptionsUsingGETOK), nil

}

/*
GetSubcriptionForMetroUsingGET validates if subscription name already exists or not

This API is used to check if Subcription name already exists or not.
*/
func (a *Client) GetSubcriptionForMetroUsingGET(params *GetSubcriptionForMetroUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubcriptionForMetroUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubcriptionForMetroUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSubcriptionForMetroUsingGET",
		Method:             "GET",
		PathPattern:        "/ecx/v3/l3/subscription/exist/{metroCode}/{subcriptionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSubcriptionForMetroUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSubcriptionForMetroUsingGETOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
