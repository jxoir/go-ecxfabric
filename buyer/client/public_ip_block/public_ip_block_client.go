// Code generated by go-swagger; DO NOT EDIT.

package public_ip_block

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new public ip block API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for public ip block API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreatePublicIPAdressUsingPOST creates public IP block address

Create Public IPBlock address
*/
func (a *Client) CreatePublicIPAdressUsingPOST(params *CreatePublicIPAdressUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePublicIPAdressUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePublicIPAdressUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPublicIpAdressUsingPOST",
		Method:             "POST",
		PathPattern:        "/ecx/v3/l3/publicIpAddress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePublicIPAdressUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePublicIPAdressUsingPOSTCreated), nil

}

/*
DeletePublicIPByIDUsingDELETE deletes public IP block address for given uuid
*/
func (a *Client) DeletePublicIPByIDUsingDELETE(params *DeletePublicIPByIDUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePublicIPByIDUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePublicIPByIDUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePublicIpByIdUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/ecx/v3/l3/publicIpAddress/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePublicIPByIDUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePublicIPByIDUsingDELETEOK), nil

}

/*
GetAllPublicIPUsingGET returns list of public IP blocks

API returns list of public IP details with respective to query params
*/
func (a *Client) GetAllPublicIPUsingGET(params *GetAllPublicIPUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllPublicIPUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPublicIPUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllPublicIPUsingGET",
		Method:             "GET",
		PathPattern:        "/ecx/v3/l3/publicIpAddress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllPublicIPUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllPublicIPUsingGETOK), nil

}

/*
GetPublicIPByUUIDUsingGET returns public ip address by uuid
*/
func (a *Client) GetPublicIPByUUIDUsingGET(params *GetPublicIPByUUIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetPublicIPByUUIDUsingGETOK, *GetPublicIPByUUIDUsingGETNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicIPByUUIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicIpByUUIDUsingGET",
		Method:             "GET",
		PathPattern:        "/ecx/v3/l3/publicIpAddress/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPublicIPByUUIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetPublicIPByUUIDUsingGETOK:
		return value, nil, nil
	case *GetPublicIPByUUIDUsingGETNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
