// Code generated by go-swagger; DO NOT EDIT.

package public_ip_block

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jxoir/go-ecxfabric/buyer/models"
)

// CreatePublicIPAdressUsingPOSTReader is a Reader for the CreatePublicIPAdressUsingPOST structure.
type CreatePublicIPAdressUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePublicIPAdressUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreatePublicIPAdressUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreatePublicIPAdressUsingPOSTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreatePublicIPAdressUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreatePublicIPAdressUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewCreatePublicIPAdressUsingPOSTMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreatePublicIPAdressUsingPOSTConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreatePublicIPAdressUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewCreatePublicIPAdressUsingPOSTServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreatePublicIPAdressUsingPOSTCreated creates a CreatePublicIPAdressUsingPOSTCreated with default headers values
func NewCreatePublicIPAdressUsingPOSTCreated() *CreatePublicIPAdressUsingPOSTCreated {
	return &CreatePublicIPAdressUsingPOSTCreated{}
}

/*CreatePublicIPAdressUsingPOSTCreated handles this case with default header values.

success
*/
type CreatePublicIPAdressUsingPOSTCreated struct {
	Payload *models.CreatePublicIPResponse
}

func (o *CreatePublicIPAdressUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /ecx/v3/l3/publicIpAddress][%d] createPublicIpAdressUsingPOSTCreated  %+v", 201, o.Payload)
}

func (o *CreatePublicIPAdressUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreatePublicIPResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePublicIPAdressUsingPOSTBadRequest creates a CreatePublicIPAdressUsingPOSTBadRequest with default headers values
func NewCreatePublicIPAdressUsingPOSTBadRequest() *CreatePublicIPAdressUsingPOSTBadRequest {
	return &CreatePublicIPAdressUsingPOSTBadRequest{}
}

/*CreatePublicIPAdressUsingPOSTBadRequest handles this case with default header values.

Bad request
*/
type CreatePublicIPAdressUsingPOSTBadRequest struct {
	Payload models.GeneralErrorMessage
}

func (o *CreatePublicIPAdressUsingPOSTBadRequest) Error() string {
	return fmt.Sprintf("[POST /ecx/v3/l3/publicIpAddress][%d] createPublicIpAdressUsingPOSTBadRequest  %+v", 400, o.Payload)
}

func (o *CreatePublicIPAdressUsingPOSTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePublicIPAdressUsingPOSTUnauthorized creates a CreatePublicIPAdressUsingPOSTUnauthorized with default headers values
func NewCreatePublicIPAdressUsingPOSTUnauthorized() *CreatePublicIPAdressUsingPOSTUnauthorized {
	return &CreatePublicIPAdressUsingPOSTUnauthorized{}
}

/*CreatePublicIPAdressUsingPOSTUnauthorized handles this case with default header values.

Unauthorized
*/
type CreatePublicIPAdressUsingPOSTUnauthorized struct {
	Payload models.GeneralErrorMessage
}

func (o *CreatePublicIPAdressUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ecx/v3/l3/publicIpAddress][%d] createPublicIpAdressUsingPOSTUnauthorized  %+v", 401, o.Payload)
}

func (o *CreatePublicIPAdressUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePublicIPAdressUsingPOSTForbidden creates a CreatePublicIPAdressUsingPOSTForbidden with default headers values
func NewCreatePublicIPAdressUsingPOSTForbidden() *CreatePublicIPAdressUsingPOSTForbidden {
	return &CreatePublicIPAdressUsingPOSTForbidden{}
}

/*CreatePublicIPAdressUsingPOSTForbidden handles this case with default header values.

Forbidden
*/
type CreatePublicIPAdressUsingPOSTForbidden struct {
	Payload models.GeneralErrorMessage
}

func (o *CreatePublicIPAdressUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /ecx/v3/l3/publicIpAddress][%d] createPublicIpAdressUsingPOSTForbidden  %+v", 403, o.Payload)
}

func (o *CreatePublicIPAdressUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePublicIPAdressUsingPOSTMethodNotAllowed creates a CreatePublicIPAdressUsingPOSTMethodNotAllowed with default headers values
func NewCreatePublicIPAdressUsingPOSTMethodNotAllowed() *CreatePublicIPAdressUsingPOSTMethodNotAllowed {
	return &CreatePublicIPAdressUsingPOSTMethodNotAllowed{}
}

/*CreatePublicIPAdressUsingPOSTMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type CreatePublicIPAdressUsingPOSTMethodNotAllowed struct {
	Payload models.GeneralErrorMessage
}

func (o *CreatePublicIPAdressUsingPOSTMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /ecx/v3/l3/publicIpAddress][%d] createPublicIpAdressUsingPOSTMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *CreatePublicIPAdressUsingPOSTMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePublicIPAdressUsingPOSTConflict creates a CreatePublicIPAdressUsingPOSTConflict with default headers values
func NewCreatePublicIPAdressUsingPOSTConflict() *CreatePublicIPAdressUsingPOSTConflict {
	return &CreatePublicIPAdressUsingPOSTConflict{}
}

/*CreatePublicIPAdressUsingPOSTConflict handles this case with default header values.

Conflict
*/
type CreatePublicIPAdressUsingPOSTConflict struct {
	Payload models.GeneralErrorMessage
}

func (o *CreatePublicIPAdressUsingPOSTConflict) Error() string {
	return fmt.Sprintf("[POST /ecx/v3/l3/publicIpAddress][%d] createPublicIpAdressUsingPOSTConflict  %+v", 409, o.Payload)
}

func (o *CreatePublicIPAdressUsingPOSTConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePublicIPAdressUsingPOSTInternalServerError creates a CreatePublicIPAdressUsingPOSTInternalServerError with default headers values
func NewCreatePublicIPAdressUsingPOSTInternalServerError() *CreatePublicIPAdressUsingPOSTInternalServerError {
	return &CreatePublicIPAdressUsingPOSTInternalServerError{}
}

/*CreatePublicIPAdressUsingPOSTInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreatePublicIPAdressUsingPOSTInternalServerError struct {
	Payload models.GeneralErrorMessage
}

func (o *CreatePublicIPAdressUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /ecx/v3/l3/publicIpAddress][%d] createPublicIpAdressUsingPOSTInternalServerError  %+v", 500, o.Payload)
}

func (o *CreatePublicIPAdressUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePublicIPAdressUsingPOSTServiceUnavailable creates a CreatePublicIPAdressUsingPOSTServiceUnavailable with default headers values
func NewCreatePublicIPAdressUsingPOSTServiceUnavailable() *CreatePublicIPAdressUsingPOSTServiceUnavailable {
	return &CreatePublicIPAdressUsingPOSTServiceUnavailable{}
}

/*CreatePublicIPAdressUsingPOSTServiceUnavailable handles this case with default header values.

Service Unavailable
*/
type CreatePublicIPAdressUsingPOSTServiceUnavailable struct {
	Payload models.GeneralErrorMessage
}

func (o *CreatePublicIPAdressUsingPOSTServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /ecx/v3/l3/publicIpAddress][%d] createPublicIpAdressUsingPOSTServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreatePublicIPAdressUsingPOSTServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
