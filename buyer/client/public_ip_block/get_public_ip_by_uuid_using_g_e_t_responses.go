// Code generated by go-swagger; DO NOT EDIT.

package public_ip_block

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jxoir/go-ecxfabric/buyer/models"
)

// GetPublicIPByUUIDUsingGETReader is a Reader for the GetPublicIPByUUIDUsingGET structure.
type GetPublicIPByUUIDUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPublicIPByUUIDUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPublicIPByUUIDUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewGetPublicIPByUUIDUsingGETNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetPublicIPByUUIDUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetPublicIPByUUIDUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetPublicIPByUUIDUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetPublicIPByUUIDUsingGETMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewGetPublicIPByUUIDUsingGETConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetPublicIPByUUIDUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetPublicIPByUUIDUsingGETServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPublicIPByUUIDUsingGETOK creates a GetPublicIPByUUIDUsingGETOK with default headers values
func NewGetPublicIPByUUIDUsingGETOK() *GetPublicIPByUUIDUsingGETOK {
	return &GetPublicIPByUUIDUsingGETOK{}
}

/*GetPublicIPByUUIDUsingGETOK handles this case with default header values.

Success
*/
type GetPublicIPByUUIDUsingGETOK struct {
	Payload *models.PublicIPAddressGetResponse
}

func (o *GetPublicIPByUUIDUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/publicIpAddress/{uuid}][%d] getPublicIpByUuidUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetPublicIPByUUIDUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PublicIPAddressGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPByUUIDUsingGETNoContent creates a GetPublicIPByUUIDUsingGETNoContent with default headers values
func NewGetPublicIPByUUIDUsingGETNoContent() *GetPublicIPByUUIDUsingGETNoContent {
	return &GetPublicIPByUUIDUsingGETNoContent{}
}

/*GetPublicIPByUUIDUsingGETNoContent handles this case with default header values.

Record Not Found
*/
type GetPublicIPByUUIDUsingGETNoContent struct {
	Payload models.GeneralErrorMessage
}

func (o *GetPublicIPByUUIDUsingGETNoContent) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/publicIpAddress/{uuid}][%d] getPublicIpByUuidUsingGETNoContent  %+v", 204, o.Payload)
}

func (o *GetPublicIPByUUIDUsingGETNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPByUUIDUsingGETBadRequest creates a GetPublicIPByUUIDUsingGETBadRequest with default headers values
func NewGetPublicIPByUUIDUsingGETBadRequest() *GetPublicIPByUUIDUsingGETBadRequest {
	return &GetPublicIPByUUIDUsingGETBadRequest{}
}

/*GetPublicIPByUUIDUsingGETBadRequest handles this case with default header values.

Bad request
*/
type GetPublicIPByUUIDUsingGETBadRequest struct {
	Payload models.GeneralErrorMessage
}

func (o *GetPublicIPByUUIDUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/publicIpAddress/{uuid}][%d] getPublicIpByUuidUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetPublicIPByUUIDUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPByUUIDUsingGETUnauthorized creates a GetPublicIPByUUIDUsingGETUnauthorized with default headers values
func NewGetPublicIPByUUIDUsingGETUnauthorized() *GetPublicIPByUUIDUsingGETUnauthorized {
	return &GetPublicIPByUUIDUsingGETUnauthorized{}
}

/*GetPublicIPByUUIDUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetPublicIPByUUIDUsingGETUnauthorized struct {
	Payload models.GeneralErrorMessage
}

func (o *GetPublicIPByUUIDUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/publicIpAddress/{uuid}][%d] getPublicIpByUuidUsingGETUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPublicIPByUUIDUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPByUUIDUsingGETForbidden creates a GetPublicIPByUUIDUsingGETForbidden with default headers values
func NewGetPublicIPByUUIDUsingGETForbidden() *GetPublicIPByUUIDUsingGETForbidden {
	return &GetPublicIPByUUIDUsingGETForbidden{}
}

/*GetPublicIPByUUIDUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetPublicIPByUUIDUsingGETForbidden struct {
	Payload models.GeneralErrorMessage
}

func (o *GetPublicIPByUUIDUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/publicIpAddress/{uuid}][%d] getPublicIpByUuidUsingGETForbidden  %+v", 403, o.Payload)
}

func (o *GetPublicIPByUUIDUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPByUUIDUsingGETMethodNotAllowed creates a GetPublicIPByUUIDUsingGETMethodNotAllowed with default headers values
func NewGetPublicIPByUUIDUsingGETMethodNotAllowed() *GetPublicIPByUUIDUsingGETMethodNotAllowed {
	return &GetPublicIPByUUIDUsingGETMethodNotAllowed{}
}

/*GetPublicIPByUUIDUsingGETMethodNotAllowed handles this case with default header values.

Method Not Allowed
*/
type GetPublicIPByUUIDUsingGETMethodNotAllowed struct {
	Payload models.GeneralErrorMessage
}

func (o *GetPublicIPByUUIDUsingGETMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/publicIpAddress/{uuid}][%d] getPublicIpByUuidUsingGETMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetPublicIPByUUIDUsingGETMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPByUUIDUsingGETConflict creates a GetPublicIPByUUIDUsingGETConflict with default headers values
func NewGetPublicIPByUUIDUsingGETConflict() *GetPublicIPByUUIDUsingGETConflict {
	return &GetPublicIPByUUIDUsingGETConflict{}
}

/*GetPublicIPByUUIDUsingGETConflict handles this case with default header values.

Conflict
*/
type GetPublicIPByUUIDUsingGETConflict struct {
	Payload models.GeneralErrorMessage
}

func (o *GetPublicIPByUUIDUsingGETConflict) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/publicIpAddress/{uuid}][%d] getPublicIpByUuidUsingGETConflict  %+v", 409, o.Payload)
}

func (o *GetPublicIPByUUIDUsingGETConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPByUUIDUsingGETInternalServerError creates a GetPublicIPByUUIDUsingGETInternalServerError with default headers values
func NewGetPublicIPByUUIDUsingGETInternalServerError() *GetPublicIPByUUIDUsingGETInternalServerError {
	return &GetPublicIPByUUIDUsingGETInternalServerError{}
}

/*GetPublicIPByUUIDUsingGETInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetPublicIPByUUIDUsingGETInternalServerError struct {
	Payload models.GeneralErrorMessage
}

func (o *GetPublicIPByUUIDUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/publicIpAddress/{uuid}][%d] getPublicIpByUuidUsingGETInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPublicIPByUUIDUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPByUUIDUsingGETServiceUnavailable creates a GetPublicIPByUUIDUsingGETServiceUnavailable with default headers values
func NewGetPublicIPByUUIDUsingGETServiceUnavailable() *GetPublicIPByUUIDUsingGETServiceUnavailable {
	return &GetPublicIPByUUIDUsingGETServiceUnavailable{}
}

/*GetPublicIPByUUIDUsingGETServiceUnavailable handles this case with default header values.

Service Unavailable
*/
type GetPublicIPByUUIDUsingGETServiceUnavailable struct {
	Payload models.GeneralErrorMessage
}

func (o *GetPublicIPByUUIDUsingGETServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l3/publicIpAddress/{uuid}][%d] getPublicIpByUuidUsingGETServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetPublicIPByUUIDUsingGETServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
