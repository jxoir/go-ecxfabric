// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetConnectionByUUIDUsingGETParams creates a new GetConnectionByUUIDUsingGETParams object
// with the default values initialized.
func NewGetConnectionByUUIDUsingGETParams() *GetConnectionByUUIDUsingGETParams {
	var ()
	return &GetConnectionByUUIDUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetConnectionByUUIDUsingGETParamsWithTimeout creates a new GetConnectionByUUIDUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetConnectionByUUIDUsingGETParamsWithTimeout(timeout time.Duration) *GetConnectionByUUIDUsingGETParams {
	var ()
	return &GetConnectionByUUIDUsingGETParams{

		timeout: timeout,
	}
}

// NewGetConnectionByUUIDUsingGETParamsWithContext creates a new GetConnectionByUUIDUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetConnectionByUUIDUsingGETParamsWithContext(ctx context.Context) *GetConnectionByUUIDUsingGETParams {
	var ()
	return &GetConnectionByUUIDUsingGETParams{

		Context: ctx,
	}
}

// NewGetConnectionByUUIDUsingGETParamsWithHTTPClient creates a new GetConnectionByUUIDUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetConnectionByUUIDUsingGETParamsWithHTTPClient(client *http.Client) *GetConnectionByUUIDUsingGETParams {
	var ()
	return &GetConnectionByUUIDUsingGETParams{
		HTTPClient: client,
	}
}

/*GetConnectionByUUIDUsingGETParams contains all the parameters to send to the API endpoint
for the get connection by Uuid using g e t operation typically these are written to a http.Request
*/
type GetConnectionByUUIDUsingGETParams struct {

	/*Authorization
	  Specify the OAuth Bearer token with prefix 'Bearer '.

	*/
	Authorization string
	/*ConnID
	  Connection UUID

	*/
	ConnID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get connection by Uuid using g e t params
func (o *GetConnectionByUUIDUsingGETParams) WithTimeout(timeout time.Duration) *GetConnectionByUUIDUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get connection by Uuid using g e t params
func (o *GetConnectionByUUIDUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get connection by Uuid using g e t params
func (o *GetConnectionByUUIDUsingGETParams) WithContext(ctx context.Context) *GetConnectionByUUIDUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get connection by Uuid using g e t params
func (o *GetConnectionByUUIDUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get connection by Uuid using g e t params
func (o *GetConnectionByUUIDUsingGETParams) WithHTTPClient(client *http.Client) *GetConnectionByUUIDUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get connection by Uuid using g e t params
func (o *GetConnectionByUUIDUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get connection by Uuid using g e t params
func (o *GetConnectionByUUIDUsingGETParams) WithAuthorization(authorization string) *GetConnectionByUUIDUsingGETParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get connection by Uuid using g e t params
func (o *GetConnectionByUUIDUsingGETParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithConnID adds the connID to the get connection by Uuid using g e t params
func (o *GetConnectionByUUIDUsingGETParams) WithConnID(connID string) *GetConnectionByUUIDUsingGETParams {
	o.SetConnID(connID)
	return o
}

// SetConnID adds the connId to the get connection by Uuid using g e t params
func (o *GetConnectionByUUIDUsingGETParams) SetConnID(connID string) {
	o.ConnID = connID
}

// WriteToRequest writes these params to a swagger request
func (o *GetConnectionByUUIDUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param connId
	if err := r.SetPathParam("connId", o.ConnID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
