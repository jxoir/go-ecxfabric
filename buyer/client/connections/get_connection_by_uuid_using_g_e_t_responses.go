// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jxoir/go-ecxfabric/buyer/models"
)

// GetConnectionByUUIDUsingGETReader is a Reader for the GetConnectionByUUIDUsingGET structure.
type GetConnectionByUUIDUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConnectionByUUIDUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetConnectionByUUIDUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewGetConnectionByUUIDUsingGETNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetConnectionByUUIDUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetConnectionByUUIDUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetConnectionByUUIDUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetConnectionByUUIDUsingGETOK creates a GetConnectionByUUIDUsingGETOK with default headers values
func NewGetConnectionByUUIDUsingGETOK() *GetConnectionByUUIDUsingGETOK {
	return &GetConnectionByUUIDUsingGETOK{}
}

/*GetConnectionByUUIDUsingGETOK handles this case with default header values.

OK
*/
type GetConnectionByUUIDUsingGETOK struct {
	Payload *models.GETConnectionByUUIDResponse
}

func (o *GetConnectionByUUIDUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/connections/{connId}][%d] getConnectionByUuidUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetConnectionByUUIDUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GETConnectionByUUIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionByUUIDUsingGETNoContent creates a GetConnectionByUUIDUsingGETNoContent with default headers values
func NewGetConnectionByUUIDUsingGETNoContent() *GetConnectionByUUIDUsingGETNoContent {
	return &GetConnectionByUUIDUsingGETNoContent{}
}

/*GetConnectionByUUIDUsingGETNoContent handles this case with default header values.

No Content
*/
type GetConnectionByUUIDUsingGETNoContent struct {
}

func (o *GetConnectionByUUIDUsingGETNoContent) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/connections/{connId}][%d] getConnectionByUuidUsingGETNoContent ", 204)
}

func (o *GetConnectionByUUIDUsingGETNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetConnectionByUUIDUsingGETBadRequest creates a GetConnectionByUUIDUsingGETBadRequest with default headers values
func NewGetConnectionByUUIDUsingGETBadRequest() *GetConnectionByUUIDUsingGETBadRequest {
	return &GetConnectionByUUIDUsingGETBadRequest{}
}

/*GetConnectionByUUIDUsingGETBadRequest handles this case with default header values.

Bad Request
*/
type GetConnectionByUUIDUsingGETBadRequest struct {
	Payload models.ErrorResponseArray
}

func (o *GetConnectionByUUIDUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/connections/{connId}][%d] getConnectionByUuidUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetConnectionByUUIDUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionByUUIDUsingGETNotFound creates a GetConnectionByUUIDUsingGETNotFound with default headers values
func NewGetConnectionByUUIDUsingGETNotFound() *GetConnectionByUUIDUsingGETNotFound {
	return &GetConnectionByUUIDUsingGETNotFound{}
}

/*GetConnectionByUUIDUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetConnectionByUUIDUsingGETNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetConnectionByUUIDUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/connections/{connId}][%d] getConnectionByUuidUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetConnectionByUUIDUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionByUUIDUsingGETInternalServerError creates a GetConnectionByUUIDUsingGETInternalServerError with default headers values
func NewGetConnectionByUUIDUsingGETInternalServerError() *GetConnectionByUUIDUsingGETInternalServerError {
	return &GetConnectionByUUIDUsingGETInternalServerError{}
}

/*GetConnectionByUUIDUsingGETInternalServerError handles this case with default header values.

Internal server error
*/
type GetConnectionByUUIDUsingGETInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetConnectionByUUIDUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ecx/v3/l2/connections/{connId}][%d] getConnectionByUuidUsingGETInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConnectionByUUIDUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
