// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAllBuyerConnectionsUsingGETParams creates a new GetAllBuyerConnectionsUsingGETParams object
// with the default values initialized.
func NewGetAllBuyerConnectionsUsingGETParams() *GetAllBuyerConnectionsUsingGETParams {
	var (
		pageNumberDefault = int32(0)
		pageSizeDefault   = int32(20)
	)
	return &GetAllBuyerConnectionsUsingGETParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllBuyerConnectionsUsingGETParamsWithTimeout creates a new GetAllBuyerConnectionsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAllBuyerConnectionsUsingGETParamsWithTimeout(timeout time.Duration) *GetAllBuyerConnectionsUsingGETParams {
	var (
		pageNumberDefault = int32(0)
		pageSizeDefault   = int32(20)
	)
	return &GetAllBuyerConnectionsUsingGETParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		timeout: timeout,
	}
}

// NewGetAllBuyerConnectionsUsingGETParamsWithContext creates a new GetAllBuyerConnectionsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAllBuyerConnectionsUsingGETParamsWithContext(ctx context.Context) *GetAllBuyerConnectionsUsingGETParams {
	var (
		pageNumberDefault = int32(0)
		pageSizeDefault   = int32(20)
	)
	return &GetAllBuyerConnectionsUsingGETParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		Context: ctx,
	}
}

// NewGetAllBuyerConnectionsUsingGETParamsWithHTTPClient creates a new GetAllBuyerConnectionsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAllBuyerConnectionsUsingGETParamsWithHTTPClient(client *http.Client) *GetAllBuyerConnectionsUsingGETParams {
	var (
		pageNumberDefault = int32(0)
		pageSizeDefault   = int32(20)
	)
	return &GetAllBuyerConnectionsUsingGETParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		HTTPClient: client,
	}
}

/*GetAllBuyerConnectionsUsingGETParams contains all the parameters to send to the API endpoint
for the get all buyer connections using g e t operation typically these are written to a http.Request
*/
type GetAllBuyerConnectionsUsingGETParams struct {

	/*Authorization
	  Specify the OAuth Bearer token with prefix 'Bearer '.

	*/
	Authorization string
	/*BuyerPortName
	  Buyer port name and buyer must have permission for that port

	*/
	BuyerPortName *string
	/*BuyerPortUUID
	  Buyer port uuid.Buyer must have permission for that port

	*/
	BuyerPortUUID *string
	/*Metadata
	  Metadata fields

	*/
	Metadata *string
	/*MetroCode
	  Buyer metro code

	*/
	MetroCode *string
	/*PageNumber
	  page number

	*/
	PageNumber *int32
	/*PageSize
	  total number of records

	*/
	PageSize *int32
	/*SearchType
	  AND or OR Value

	*/
	SearchType *string
	/*Status
	  connection status

	*/
	Status []string
	/*SubAccount*/
	SubAccount *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) WithTimeout(timeout time.Duration) *GetAllBuyerConnectionsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) WithContext(ctx context.Context) *GetAllBuyerConnectionsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) WithHTTPClient(client *http.Client) *GetAllBuyerConnectionsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) WithAuthorization(authorization string) *GetAllBuyerConnectionsUsingGETParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithBuyerPortName adds the buyerPortName to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) WithBuyerPortName(buyerPortName *string) *GetAllBuyerConnectionsUsingGETParams {
	o.SetBuyerPortName(buyerPortName)
	return o
}

// SetBuyerPortName adds the buyerPortName to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) SetBuyerPortName(buyerPortName *string) {
	o.BuyerPortName = buyerPortName
}

// WithBuyerPortUUID adds the buyerPortUUID to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) WithBuyerPortUUID(buyerPortUUID *string) *GetAllBuyerConnectionsUsingGETParams {
	o.SetBuyerPortUUID(buyerPortUUID)
	return o
}

// SetBuyerPortUUID adds the buyerPortUuid to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) SetBuyerPortUUID(buyerPortUUID *string) {
	o.BuyerPortUUID = buyerPortUUID
}

// WithMetadata adds the metadata to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) WithMetadata(metadata *string) *GetAllBuyerConnectionsUsingGETParams {
	o.SetMetadata(metadata)
	return o
}

// SetMetadata adds the metadata to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) SetMetadata(metadata *string) {
	o.Metadata = metadata
}

// WithMetroCode adds the metroCode to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) WithMetroCode(metroCode *string) *GetAllBuyerConnectionsUsingGETParams {
	o.SetMetroCode(metroCode)
	return o
}

// SetMetroCode adds the metroCode to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) SetMetroCode(metroCode *string) {
	o.MetroCode = metroCode
}

// WithPageNumber adds the pageNumber to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) WithPageNumber(pageNumber *int32) *GetAllBuyerConnectionsUsingGETParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) WithPageSize(pageSize *int32) *GetAllBuyerConnectionsUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithSearchType adds the searchType to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) WithSearchType(searchType *string) *GetAllBuyerConnectionsUsingGETParams {
	o.SetSearchType(searchType)
	return o
}

// SetSearchType adds the searchType to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) SetSearchType(searchType *string) {
	o.SearchType = searchType
}

// WithStatus adds the status to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) WithStatus(status []string) *GetAllBuyerConnectionsUsingGETParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) SetStatus(status []string) {
	o.Status = status
}

// WithSubAccount adds the subAccount to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) WithSubAccount(subAccount *string) *GetAllBuyerConnectionsUsingGETParams {
	o.SetSubAccount(subAccount)
	return o
}

// SetSubAccount adds the subAccount to the get all buyer connections using g e t params
func (o *GetAllBuyerConnectionsUsingGETParams) SetSubAccount(subAccount *string) {
	o.SubAccount = subAccount
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllBuyerConnectionsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.BuyerPortName != nil {

		// query param buyerPortName
		var qrBuyerPortName string
		if o.BuyerPortName != nil {
			qrBuyerPortName = *o.BuyerPortName
		}
		qBuyerPortName := qrBuyerPortName
		if qBuyerPortName != "" {
			if err := r.SetQueryParam("buyerPortName", qBuyerPortName); err != nil {
				return err
			}
		}

	}

	if o.BuyerPortUUID != nil {

		// query param buyerPortUUID
		var qrBuyerPortUUID string
		if o.BuyerPortUUID != nil {
			qrBuyerPortUUID = *o.BuyerPortUUID
		}
		qBuyerPortUUID := qrBuyerPortUUID
		if qBuyerPortUUID != "" {
			if err := r.SetQueryParam("buyerPortUUID", qBuyerPortUUID); err != nil {
				return err
			}
		}

	}

	if o.Metadata != nil {

		// query param metadata
		var qrMetadata string
		if o.Metadata != nil {
			qrMetadata = *o.Metadata
		}
		qMetadata := qrMetadata
		if qMetadata != "" {
			if err := r.SetQueryParam("metadata", qMetadata); err != nil {
				return err
			}
		}

	}

	if o.MetroCode != nil {

		// query param metroCode
		var qrMetroCode string
		if o.MetroCode != nil {
			qrMetroCode = *o.MetroCode
		}
		qMetroCode := qrMetroCode
		if qMetroCode != "" {
			if err := r.SetQueryParam("metroCode", qMetroCode); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.SearchType != nil {

		// query param searchType
		var qrSearchType string
		if o.SearchType != nil {
			qrSearchType = *o.SearchType
		}
		qSearchType := qrSearchType
		if qSearchType != "" {
			if err := r.SetQueryParam("searchType", qSearchType); err != nil {
				return err
			}
		}

	}

	valuesStatus := o.Status

	joinedStatus := swag.JoinByFormat(valuesStatus, "multi")
	// query array param status
	if err := r.SetQueryParam("status", joinedStatus...); err != nil {
		return err
	}

	if o.SubAccount != nil {

		// query param subAccount
		var qrSubAccount string
		if o.SubAccount != nil {
			qrSubAccount = *o.SubAccount
		}
		qSubAccount := qrSubAccount
		if qSubAccount != "" {
			if err := r.SetQueryParam("subAccount", qSubAccount); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
