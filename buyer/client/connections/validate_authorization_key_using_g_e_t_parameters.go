// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewValidateAuthorizationKeyUsingGETParams creates a new ValidateAuthorizationKeyUsingGETParams object
// with the default values initialized.
func NewValidateAuthorizationKeyUsingGETParams() *ValidateAuthorizationKeyUsingGETParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ValidateAuthorizationKeyUsingGETParams{
		ContentType: &contentTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewValidateAuthorizationKeyUsingGETParamsWithTimeout creates a new ValidateAuthorizationKeyUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewValidateAuthorizationKeyUsingGETParamsWithTimeout(timeout time.Duration) *ValidateAuthorizationKeyUsingGETParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ValidateAuthorizationKeyUsingGETParams{
		ContentType: &contentTypeDefault,

		timeout: timeout,
	}
}

// NewValidateAuthorizationKeyUsingGETParamsWithContext creates a new ValidateAuthorizationKeyUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewValidateAuthorizationKeyUsingGETParamsWithContext(ctx context.Context) *ValidateAuthorizationKeyUsingGETParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ValidateAuthorizationKeyUsingGETParams{
		ContentType: &contentTypeDefault,

		Context: ctx,
	}
}

// NewValidateAuthorizationKeyUsingGETParamsWithHTTPClient creates a new ValidateAuthorizationKeyUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewValidateAuthorizationKeyUsingGETParamsWithHTTPClient(client *http.Client) *ValidateAuthorizationKeyUsingGETParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ValidateAuthorizationKeyUsingGETParams{
		ContentType: &contentTypeDefault,
		HTTPClient:  client,
	}
}

/*ValidateAuthorizationKeyUsingGETParams contains all the parameters to send to the API endpoint
for the validate authorization key using g e t operation typically these are written to a http.Request
*/
type ValidateAuthorizationKeyUsingGETParams struct {

	/*Authorization
	  Specify the OAuth Bearer token with prefix 'Bearer '.

	*/
	Authorization string
	/*ContentType
	  Content-Type

	*/
	ContentType *string
	/*AuthorizationKey
	  authorizationKey

	*/
	AuthorizationKey string
	/*MetroCode
	  metroCode

	*/
	MetroCode string
	/*ProfileID
	  profileId

	*/
	ProfileID string
	/*Region
	  region

	*/
	Region string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) WithTimeout(timeout time.Duration) *ValidateAuthorizationKeyUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) WithContext(ctx context.Context) *ValidateAuthorizationKeyUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) WithHTTPClient(client *http.Client) *ValidateAuthorizationKeyUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) WithAuthorization(authorization string) *ValidateAuthorizationKeyUsingGETParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithContentType adds the contentType to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) WithContentType(contentType *string) *ValidateAuthorizationKeyUsingGETParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) SetContentType(contentType *string) {
	o.ContentType = contentType
}

// WithAuthorizationKey adds the authorizationKey to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) WithAuthorizationKey(authorizationKey string) *ValidateAuthorizationKeyUsingGETParams {
	o.SetAuthorizationKey(authorizationKey)
	return o
}

// SetAuthorizationKey adds the authorizationKey to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) SetAuthorizationKey(authorizationKey string) {
	o.AuthorizationKey = authorizationKey
}

// WithMetroCode adds the metroCode to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) WithMetroCode(metroCode string) *ValidateAuthorizationKeyUsingGETParams {
	o.SetMetroCode(metroCode)
	return o
}

// SetMetroCode adds the metroCode to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) SetMetroCode(metroCode string) {
	o.MetroCode = metroCode
}

// WithProfileID adds the profileID to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) WithProfileID(profileID string) *ValidateAuthorizationKeyUsingGETParams {
	o.SetProfileID(profileID)
	return o
}

// SetProfileID adds the profileId to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) SetProfileID(profileID string) {
	o.ProfileID = profileID
}

// WithRegion adds the region to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) WithRegion(region string) *ValidateAuthorizationKeyUsingGETParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the validate authorization key using g e t params
func (o *ValidateAuthorizationKeyUsingGETParams) SetRegion(region string) {
	o.Region = region
}

// WriteToRequest writes these params to a swagger request
func (o *ValidateAuthorizationKeyUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.ContentType != nil {

		// header param Content-Type
		if err := r.SetHeaderParam("Content-Type", *o.ContentType); err != nil {
			return err
		}

	}

	// query param authorizationKey
	qrAuthorizationKey := o.AuthorizationKey
	qAuthorizationKey := qrAuthorizationKey
	if qAuthorizationKey != "" {
		if err := r.SetQueryParam("authorizationKey", qAuthorizationKey); err != nil {
			return err
		}
	}

	// query param metroCode
	qrMetroCode := o.MetroCode
	qMetroCode := qrMetroCode
	if qMetroCode != "" {
		if err := r.SetQueryParam("metroCode", qMetroCode); err != nil {
			return err
		}
	}

	// query param profileId
	qrProfileID := o.ProfileID
	qProfileID := qrProfileID
	if qProfileID != "" {
		if err := r.SetQueryParam("profileId", qProfileID); err != nil {
			return err
		}
	}

	// query param region
	qrRegion := o.Region
	qRegion := qrRegion
	if qRegion != "" {
		if err := r.SetQueryParam("region", qRegion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
